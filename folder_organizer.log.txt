2025-06-23 23:13:29,659 [INFO] folder_organizer.cli: Loading documents from /Users/lukasfiller/Downloads/dddd
2025-06-23 23:13:29,659 [INFO] folder_organizer.loader: Loading documents from path /Users/lukasfiller/Downloads/dddd
2025-06-23 23:13:29,660 [INFO] folder_organizer.loader: Skipping archive /Users/lukasfiller/Downloads/dddd/Document 9 - 2013_en-cl.docx
2025-06-23 23:13:29,661 [DEBUG] folder_organizer.loader: Loading file /Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt
2025-06-23 23:13:29,661 [DEBUG] folder_organizer.loader: Loaded 1 doc(s) from /Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt
2025-06-23 23:13:29,661 [DEBUG] folder_organizer.loader: Loading file /Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf
2025-06-23 23:13:29,743 [WARNING] pypdf._cmap: Skipping broken line b'01af   01af   1d504': Odd-length string
2025-06-23 23:13:29,743 [WARNING] pypdf._cmap: Skipping broken line b'01dd   01dd   1d505': Odd-length string
2025-06-23 23:13:29,744 [WARNING] pypdf._cmap: Skipping broken line b'0339   0339   1d50a': Odd-length string
2025-06-23 23:13:29,745 [WARNING] pypdf._cmap: Skipping broken line b'0453   0453   1d50e': Odd-length string
2025-06-23 23:13:29,745 [WARNING] pypdf._cmap: Skipping broken line b'04a8   04a8   1d50f': Odd-length string
2025-06-23 23:13:29,745 [WARNING] pypdf._cmap: Skipping broken line b'04cb   04cb   1d510': Odd-length string
2025-06-23 23:13:29,745 [WARNING] pypdf._cmap: Skipping broken line b'04cc   04cc   1d40c': Odd-length string
2025-06-23 23:13:29,746 [WARNING] pypdf._cmap: Skipping broken line b'05c8   05c8   1d513': Odd-length string
2025-06-23 23:13:29,746 [WARNING] pypdf._cmap: Skipping broken line b'05d7   05d7   1d514': Odd-length string
2025-06-23 23:13:29,746 [WARNING] pypdf._cmap: Skipping broken line b'064a   064a   1d516': Odd-length string
2025-06-23 23:13:29,746 [WARNING] pypdf._cmap: Skipping broken line b'0688   0688   1d517': Odd-length string
2025-06-23 23:13:29,746 [WARNING] pypdf._cmap: Skipping broken line b'070c   070c   1d519': Odd-length string
2025-06-23 23:13:29,756 [WARNING] pypdf._cmap: Skipping broken line b'01af   01af   1d504': Odd-length string
2025-06-23 23:13:29,756 [WARNING] pypdf._cmap: Skipping broken line b'01dd   01dd   1d505': Odd-length string
2025-06-23 23:13:29,757 [WARNING] pypdf._cmap: Skipping broken line b'0339   0339   1d50a': Odd-length string
2025-06-23 23:13:29,757 [WARNING] pypdf._cmap: Skipping broken line b'0453   0453   1d50e': Odd-length string
2025-06-23 23:13:29,757 [WARNING] pypdf._cmap: Skipping broken line b'04a8   04a8   1d50f': Odd-length string
2025-06-23 23:13:29,757 [WARNING] pypdf._cmap: Skipping broken line b'04cb   04cb   1d510': Odd-length string
2025-06-23 23:13:29,757 [WARNING] pypdf._cmap: Skipping broken line b'04cc   04cc   1d40c': Odd-length string
2025-06-23 23:13:29,758 [WARNING] pypdf._cmap: Skipping broken line b'05c8   05c8   1d513': Odd-length string
2025-06-23 23:13:29,758 [WARNING] pypdf._cmap: Skipping broken line b'05d7   05d7   1d514': Odd-length string
2025-06-23 23:13:29,758 [WARNING] pypdf._cmap: Skipping broken line b'064a   064a   1d516': Odd-length string
2025-06-23 23:13:29,758 [WARNING] pypdf._cmap: Skipping broken line b'0688   0688   1d517': Odd-length string
2025-06-23 23:13:29,759 [WARNING] pypdf._cmap: Skipping broken line b'070c   070c   1d519': Odd-length string
2025-06-23 23:13:29,893 [DEBUG] folder_organizer.loader: Loaded 16 doc(s) from /Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf
2025-06-23 23:13:29,893 [DEBUG] folder_organizer.loader: Loaded 17 document(s)
2025-06-23 23:13:29,893 [INFO] folder_organizer.cli: Summarizing 17 documents
2025-06-23 23:13:29,893 [INFO] folder_organizer.summarizer: Summarizing 17 document(s)
2025-06-23 23:13:29,902 [DEBUG] folder_organizer.summarizer: Created ChatOllama with model minicpm-v:8b-2.6-q4_K_M
2025-06-23 23:13:29,903 [DEBUG] folder_organizer.summarizer: Loaded summarize chain
2025-06-23 23:13:29,907 [DEBUG] httpcore.connection: connect_tcp.started host='127.0.0.1' port=11434 local_address=None timeout=None socket_options=None
2025-06-23 23:13:29,908 [DEBUG] httpcore.connection: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10dd3fb60>
2025-06-23 23:13:29,908 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:29,908 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:29,908 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:29,908 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:29,908 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:37,761 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:37 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:37,762 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:37,762 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:13:38,880 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:13:38,880 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:13:38,880 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:13:38,881 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:38,881 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:38,881 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:38,882 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:38,882 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:39,120 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:39 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:39,121 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:39,121 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:13:40,216 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:13:40,216 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:13:40,216 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:13:40,217 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:40,217 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:40,217 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:40,217 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:40,217 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:40,970 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:40 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:40,970 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:40,970 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:13:42,099 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:13:42,099 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:13:42,099 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:13:42,100 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:42,100 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:42,100 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:42,100 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:42,100 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:43,521 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:43 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:43,522 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:43,522 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:13:44,620 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:13:44,620 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:13:44,620 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:13:44,621 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:44,621 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:44,621 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:44,622 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:44,622 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:45,983 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:45 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:45,983 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:45,984 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:13:47,022 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:13:47,022 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:13:47,022 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:13:47,022 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:47,023 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:47,023 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:47,023 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:47,023 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:48,221 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:48 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:48,221 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:48,222 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:13:50,299 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:13:50,299 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:13:50,299 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:13:50,299 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:50,300 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:50,300 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:50,300 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:50,300 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:51,846 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:51 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:51,846 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:51,846 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:13:54,171 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:13:54,171 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:13:54,171 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:13:54,171 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:54,172 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:54,172 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:54,172 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:54,172 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:55,510 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:55 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:55,510 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:55,510 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:13:57,586 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:13:57,586 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:13:57,586 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:13:57,587 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:13:57,587 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:13:57,587 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:13:57,587 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:13:57,587 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:13:58,289 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:13:58 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:13:58,289 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:13:58,289 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:00,189 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:00,189 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:00,189 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:00,190 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:00,190 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:00,190 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:00,190 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:00,191 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:01,434 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:01 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:01,435 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:01,435 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:02,777 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:02,777 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:02,777 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:02,777 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:02,777 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:02,777 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:02,778 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:02,778 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:04,169 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:04 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:04,169 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:04,169 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:05,758 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:05,758 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:05,758 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:05,759 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:05,759 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:05,759 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:05,759 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:05,759 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:06,944 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:06 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:06,944 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:06,945 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:08,007 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:08,007 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:08,007 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:08,008 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:08,008 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:08,008 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:08,008 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:08,008 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:09,180 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:09 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:09,181 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:09,181 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:10,626 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:10,627 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:10,627 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:10,627 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:10,627 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:10,628 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:10,628 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:10,628 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:11,820 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:11 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:11,821 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:11,821 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:12,733 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:12,733 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:12,733 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:12,734 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:12,734 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:12,734 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:12,734 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:12,734 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:13,890 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:13 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:13,891 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:13,891 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:16,498 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:16,499 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:16,499 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:16,499 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:16,499 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:16,499 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:16,499 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:16,499 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:17,624 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:17 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:17,624 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:17,624 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:19,554 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:19,554 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:19,554 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:19,555 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:19,555 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:19,555 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:19,555 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:19,555 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:20,349 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:20 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:20,349 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:20,349 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:23,928 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:23,928 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:23,928 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:25,009 [DEBUG] urllib3.connectionpool: Starting new HTTPS connection (1): huggingface.co:443
2025-06-23 23:14:25,260 [DEBUG] urllib3.connectionpool: https://huggingface.co:443 "HEAD /gpt2/resolve/main/tokenizer_config.json HTTP/1.1" 200 0
2025-06-23 23:14:25,355 [DEBUG] urllib3.connectionpool: https://huggingface.co:443 "GET /api/models/gpt2/tree/main/additional_chat_templates?recursive=False&expand=False HTTP/1.1" 307 133
2025-06-23 23:14:25,551 [DEBUG] urllib3.connectionpool: https://huggingface.co:443 "GET /api/models/openai-community/gpt2/tree/main/additional_chat_templates?recursive=False&expand=False HTTP/1.1" 404 64
2025-06-23 23:14:25,647 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:14:25,647 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:14:25,647 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:14:25,648 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:14:25,648 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:14:28,340 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:14:28 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:14:28,340 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:14:28,340 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:14:43,933 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:14:43,933 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:14:43,933 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:14:43,934 [DEBUG] folder_organizer.summarizer: Summary result: {'input_documents': [Document(metadata={'source': '/Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt'}, page_content='CHINESE VIEWS OF THE ROLE OF MORALITY IN INTERNATIONAL RELATIONS AND THE USE OF FORCE \nBy Lukas Filler \nABSTRACT\nThis study quantitatively tested whether the strategic preferences of China’s future decision makers are consistent with non-coercive Confucian values. Students at six elite Chinese universities were surveyed to identify beliefs about the character of the international system, when and how it is permissible to use force, and whether morality should constrain state behavior. Structural Equation Modeling was used to characterize and validate stated beliefs, strategic preferences, and moral reasoning as well as to determine the extent to which they reflected the theoretical Confucian system of values and conception of moral governance. Respondents’ perception of a dangerous, zero-sum, conflict-prone international system was not consistent with a Confucian worldview. Neither was their strong proclivity to use force to counter most any potential threat or when in the state’s best overall interests. There was substantial concern for noncombatants and the intentionality of harming them influenced the morality of doing so. However, moral ideals did not strongly constrain behavior. At the same time, such exceptional necessity also did not tend to make immoral behavior moral. There was also a consistent, strong bias to hold foreign states to higher standards of behavior and morality than the respondents’ own state. The results also showed that the framework of related issues which define and differentiate major IR theories only explained a small portion of respondents’ beliefs about the international system, state behavior, and the role of morality in them. It is likely that respondents’ reasoning about these issues were also influenced by nationalistic beliefs which combined Confucian and political realist ideologies. \nChapter 1: Introduction\nBACKGROUND \nChina’s rapid economic development has been accompanied by greater power and influence in regional and international affairs. It’s rapid military modernization, increasingly coercive behavior, and frequent criticism of and disregard for the current, Western values- based international system signal the potential for dramatic changes to the status quo. China’s intentional obfuscation of its goals and how it intends to achieve them further increases anxiety about what kind of threat it represents. The role of force in China’s pursuit of state interests and security strongly depends upon its perceived efficacy, necessity, and perhaps morality. Political realist IR theory is based upon the assumption that the world is anarchic, zero-sum competition for survival and that states are “rational unitary actors” who seek to maximize power. As a result, state security depends upon pursuit of national interests - and states cannot afford to be constrained by morality. Confucian ideals are inconsistent with such goals and uses of coercion and force because they are believed to be counter to and ineffective at fostering a world based upon core ethical principles like compassion, harmony, benevolence, and reciprocity. The logical connection between views of international relations, the priorities of the state, and how they ought to be pursued allows for comparing stated beliefs about war to those about the character of the international system – and these to the normative ideals of the Confucian paradigm – to test the validity and legitimacy of professed values.\nPROBLEM \nThe evolution of Western morality and international laws about war has been shaped by its religious, philosophical, and political history. China’s beliefs about war may be dramatically different as they were shaped by its own, distinctive culture and history. Indeed, China claims that its goals and behavior have always been guided by its unique Confucian-based culture - which emphasizes pacifistic non-coercive values such as compassion, benevolence and humaneness. Yet, a substantial number of scholars have found that China’s historical use of force appears to contradict these professed preferences. Rather than being constrained by Confucian morality, it has been employed whenever and however considered effective for countering threats. Indeed, studies have found there to be a proclivity to counter even minor potential threats with offensive force rather than through less coercive means such as accommodation and compromise. One reason may be that, perhaps due to a long history of frequent conflicts with other states, Chinese leaders and advisers generally have held strong realist views of the international system - one of anarchy, zero-sum competition, and inevitable war. In response to concerns about China’s recent, rapid development and, at times, coercive use of economic and military strength to pursue state interests, a new national strategy was developed. The core idea, that China will always adhere to a “developmental road of peaceful rise,” is a clear reference to its Confucian heritage. Though many of the examples cited in support of this assertion have been criticized as misleading or false, China points to its “non-alignment” during the Cold War, its generous sharing of economic prosperity with other states that, unlike the US, does not come with interventionist political requirements, its traumatic experiences for a hundred years after the Opium Wars, and the supposedly peaceful trading explorations of Zheng He as examples of its nonaggressive preferences. In an official speech, Premier Wen Jiabao expanded on the “five essentials” for China’s peaceful rise to include “1. taking advantage of world peace to promote China’s development and safeguarding world peace through China’s development; 2. It would be based on China’s own strength and independent hard work; 3. It could not be achieved without continuing the “opening-up policy” and an active set of international trade and economic exchanges; 4. It would take several generations; and 5. It would “not stand in the way of any other country or pose a threat to any other country, or be achieved at the expense of any particular nation.”. The “peaceful rise” also involves further “opening up” through mutually- beneficial globalization and economic development that shuns expansionism, oppressing others, and any other hegemonic, destabilizing behaviors. The concept, renamed “peaceful development,” has continued to receive official endorsement in both formal and informal mediums. For example, President Xi Jinping in a recent speech credited Confucianism as the “Chinese traditional culture” which is the primary source for the values which guide its soft power, governance, relations, and development ("China Commemorates Confucius with High-Profile Ceremony"). Accordingly, China not only seeks to foster a more harmonious society and world but prefers to do so through nonaggressive, non-expansionist, and peaceful domestic and foreign policies that reflect and promote these values. As a result, China will continue to resolve disagreements through accommodation, compromise and other nonviolent means whenever possible. The immorality and inefficacy of coercion means that force will only be used to counter the most extreme threats and, even then, will be limited and defensive. Yet, the “peaceful rise” and “development” strategies have received strong criticisms by Chinese as well as non-Chinese scholars. Two Chinese concerns are that this strategy signals a lack of resolve and also will constrain China’s options to deter Taiwan independence and other territorial disputes. Other concerns include that the “external security environment” make it impossible for China’s peaceful rise; that it is too soon to claim China’s peaceful ascendancy so confidently; that it is not in harmony with President Deng’s strategy for China to “bide its time and hide its capabilities;” that it would inhibit military modernization and so weaken China; and that it could “incite domestic nationalism and create political problems.”. The concept has evolved over time and caveats have been added to address some concerns. For example, to counter the possibility that other states see this as an exploitable opportunity, it has been emphasized that China’s peaceful, win-win strategy is contingent on the behavior of other states. A PhD researcher at a Chinese Communist Party think tank states, Chinese President Xi Jinping has repeatedly stressed that China will stick to the road of peaceful development, but will never give up its legitimate rights and will never sacrifice its national core interests. He also noted that no country should presume that China will engage in trade involving the core interests or that China will swallow the “bitter fruit” of harming its sovereignty, security or development interests. From this perspective, the related countries should not underestimate China’s determination and willpower to safeguard the core national interests. Though worded defensively, some may see this as further evidence of thinly-veiled offensive realist views. Especially when directly supported by senior official government statements that there is a direct “dialectical relationship between peaceful development and China’s protection of national interests. As China’s peaceful development progresses, it will have more resources and measures to protect its national interests and become increasingly proactive in doing so. China will neither sacrifice other countries’ interests to achieve its own development, nor will it allow other countries to encroach upon China’s legitimate rights and interests”. Frequent inconsistencies between China’s patterns of behavior and its professed moral principles cause many to believe that moral language is used symbolically to legitimate the realist decision to use force. Other scholars disagree, arguing that Confucian preferences exist but a highly conflict-prone realist view of the international system amplifies the severity of threats to state security, allowing for nearly anything to meet the moral threshold of last resort in self-defense. It is also possible morality is an important factor that shapes preferences but is often disregarded out of perceived necessity due to exceptional circumstances. That the behaviors and justifications for each of these possible interpretations are mostly indistinguishable to the outside observer makes it difficult to use them to determine strategic preferences or the role of morality. \nTHEORETICAL FRAMEWORK \nPrior studies have sought to answer these questions by measuring whether political realist or Confucian beliefs best explain China’s strategic preferences, as derived from the past statements and behavior of China’s military, political, and academic elites.1 However, this approach is controversial as the dearth of relevant data means that these studies rely heavily on inference to identify beliefs, biases, motives, and other causal factors – making educated assumptions from public behavior and the limited statements and texts available to scholars. The primary metric used in this study – “whether morality constrains selfish behavior” – reflects a fundamental disagreement in IR about whether “norms shape interests”. As Herrmann states, “link[ing] this theoretical debate to evidence is complicated. It requires identifying what a state would do if it were motivated by material concerns that is different from what it would do if it were motivated by normative ideas”. It is easier and more accurate to do this by directly measuring beliefs and then using the relationships between them to characterize the decision-making process than by looking at past behavior and trying to determine which motive was responsible for it. Without a sufficient range of primary sources to provide critical context and balance, the standards used to evaluate case studies must be quite general. For example, it is often necessary but too reductive to define Confucianism as a strict interpretation of pacifism where most any use of force is evidence of its lack of influence. Instead, like modern Christian ethics, a more nuanced position of strongly eschewing the use of force is a more reasonable standard. It is similarly misleading to consider any violation of the moral obligation to not do harm as sufficient proof that morality was irrelevant in the decision because the use of force inherently violates one moral principle to uphold another. The morality of this decision depends upon what ethical theory was used to weigh overall moral value of the options – what “ought” to be done. The three major normative theories – deontological, teleological, and virtue ethics – differently measure what is the ultimate good to evaluate whether a potential act does more harm or good. Very briefly, deontological ethics holds that the highest moral good is “good will” – the intent to uphold moral duties, rules, and rights - as only it is both intrinsic (“good in itself”) and unqualified. Thus, an act is moral if it does what is “right.” That is to say whether, regardless of consequences, it upholds the universal rights of and duties to others. People are to be always treated “as ends and never as means” and rules are upheld for their intrinsic value not out of fear of punishment. Some believe that this emphasis means that there is a moral difference between intending to do harm and allowing an act to do harm as a side effect of the greater good (the “Doctrine of Double Effect” or “DDE”). Recognition that this approach may involve conflicting duties leads some to argue that these duties are “prima facie”. That upholding specific moral rules may not always bring about the highest good has led to the idea of “threshold deontology,” where, at some point “the consequences become so dire” that it is more moral to prioritize the best outcomes instead. Teleological ethics (interchangeably referred to as “consequentialist ethics”) base the morality of an act upon the net sum of all its intentional causes - anticipated and/or actual. The consequences that can be considered must be consistent but can be those from specific acts, of upholding moral rules, the “utility” of the act to bring about the most good to the most people, and many other desired ends. “Good” results are more important than “right” action however there is potential for abuse as this also establishes that numerous “ends justify the means”. Though are a number of different ways to measure what is “good,” the moral content of the act must be objective and impartial – it cannot vary based upon who does it or benefits from it. As with deontological ethics, it is widely recognized that there are circumstances – especially in war – where morality ought not be based upon the good outcome alone as the accompanying violation of moral rights/duties is too egregious. Virtue ethics holds that the highest good is neither the best results for the most people nor the upholding of universal rights and duties but, rather, creating conditions ideal for the spiritual “flourishing” of all. While both teleological and deontological ethics also consider the moral value of motive, virtue ethics considers whether the act expresses moral character rather than the goodness of consequences or the rightness of upholding rules. For example, not lying because of the consequentialist fear of punishment if caught or because it is a moral duty to always be truthful even if it is hurtful or results in greater harms does not makes one an “honest person” – meaning one of overall high moral character. Hence, virtue ethics center morality on the actor rather than the act and on the good of the community rather than that of the individual. It is often difficult in the complex, real world to know what is the most virtuous way to act so virtue is an ever-on-going process that improves with wisdom and “moral sensitivity”. Role models and education are key to acquiring these. It is also hard to test the legitimacy of acts justified according to virtue ethics as the defining centrality of virtuous motive means there are no “universal rules or principles”. This also leads to criticisms that what is “virtuous” can dramatically vary across cultures and that such “moral relativism” proves that there are no absolute, universal morals, values, or truths. This threatens to reduce the gravity of acts such as rape, genocide, and slavery to the point where they are permitted with little objection. Knowing which ethical theory is used to weigh the morality of possible uses of force is key to understanding the decision-making process and for verifying the legitimacy of moral justifications. For example, deontological ethics, concerned with the “means,” would believe there is more overall moral good done in a longer war that better avoids violating the rights of individuals. Consequentialist ethics would consider it morally preferable to have an unrestrained but faster war because, based upon consideration of the “ends,” this creates less overall harm. Yet, a war viewed from one perspective but conducted according to the rules of the other would see a pattern of immoral behavior. Identifying motivating beliefs according to observed behavior/preferences is further complicated because these same behaviors/preferences could also derive from other motives and assumptions. Depending upon the specific situation, faster but more destructive wars or slower but more restrained wars can be consistent with the political realist belief that states should pursue its interests however most effective and without moral constraint as well as with an individual’s interpretation that either strategy, in its specific situation, best expresses virtuous character. Initial baselines for “normal” moral reasoning can be created by whether the expected “ends,” “means” or moral obligations, or what best expresses fundamental virtues determine when it is acceptable to do harm because it will result in more overall moral good. The role of morality in shaping strategic behavior can then be determined by looking at what factors and conditions actually influence the permissibility of doing harm and how they do so. Once identified, the reasons for what is considered moral to change are validated using the standards of impartiality, consistency, and coherence. What is “moral” is highly variable because, for instance, there are many ways to interpret moral principles, weigh their relative importance, and apply them to any given situation. Situationally-defined conditions and considerations such as at what perceived severity of a threat and at what threshold of severity is a war in self-defense morally just are highly-subjective, ambiguously-defined, and not accounted for in most IR theories that assume states will behave rationally to maximize their gains. However, the wide range of legitimate interpretations can be tested because morality cannot vary based simply upon what is most convenient or most effective for pursuing the interests of oneself or one’s state. Consistency further requires that, under the same conditions, the permissibility of doing harm is recognized as being the same when it is to one’s own detriment as when it is to one’s benefit. Moral decisions must be objective and impartial. At the same time, these nuanced standards for what qualifies as Confucian beliefs about and preferences for war do not make violence moral because it simply meets the requirements of consistency. The reasons to use force must still be coherent with the overall pacifistic preferences and values espoused by Confucianism. For example, consistent claims that countries may torture civilians any time doing so would help national security would still be immoral as it is contradictory to Confucian conceptions of benevolence, humaneness, etc. It is also kept in mind that ethical theories provide a framework for considering morally complex situations, yet, they cannot account for every possible scenario. There are times when the best option is contrary to normal beliefs and reasoning. For example, many teleological ethicists would find terrorism or the torturing of civilians immoral even if doing so was believed likely to lead to substantial military advantage. Deontologists, similarly, may weigh the morality of an act that harms noncombatants according to the military gains - such as choosing the option that kills one civilian rather than the option where two people die. As these would be indicated by patterns where such contradictions correlate to a common logical factor, again, the standards of consistency and coherence can differentiate between exceptions motivated by morality and by self-interest or efficacy. Decisions contradictory to stated beliefs and preferences also may occur because the circumstances are considered so severe that exceptional necessity permits them. Walzer argues that it is permissible to override the normal prohibition of intentionally targeting civilians only if the threat is imminent and “of an unusual and horrible kind”. In an effort to preserve the moral authority of Just War restraints, the severity of threat which permits moral transgressions is set very high. Unpleasant outcomes of “ordinary defeat” in war such as occupation or annexation do not qualify. As “the survival and freedom of political communities – whose members share a way of life, developed by their ancestors to be passed on to their children – are the highest values of international society,” only imminent threat of destruction of a “political community” is sufficiently severe. Yet, the value of political communities as well as what conditions constitute sufficient “necessity” to permit violation of normal morality is a controversial and subjective matter. Though “political and military leaders may sometimes find themselves in situations where they cannot avoid acting immorally, even when that means deliberately killing the innocent,” they may feel that necessity does not fully absolve them from having committed what is normally deemed a strongly immoral act. The “moral remainder” or “moral residue” from the recognition that what they did was simultaneously both moral and immoral is described as “Dirty Hands”. This contradiction opens the door for self-interested interpretations of ethics but recognizing that normal morality is not fully discarded even in the most extreme cases also helps preserve its relevance and legitimacy. The moral content of such conflicts can widely differ depending upon ethical beliefs. While some consequentialists would have little qualms about harming innocent civilians to ensure state survival as it is moral to do the lesser evil, most other ethical theories are not able to resolve such a sharp contradiction quite so easily. For example, there is no easy answer about what ought to be done for those who believe in strict adherence to deontological rules/virtues or to the teleological utilitarian belief that there are “no exceptions “whatever the circumstances” to their basic rule of maximising satisfactory outcomes” for all parties involved. The concept of “threshold deontology,” where teleological morality takes over for the usual deontological prioritization of rights when the consequences become sufficiently severe, similarly acknowledges that moral rules are prima facie and can be reprioritized based upon the actual circumstances. However, this does not resolve the problem that the inconsistent use of ethical theories normally invalidates any claims of moral justification. The overall morality of “supreme emergencies” is also defended by pointing out that the duties of politicians and the military create a special moral obligation to prioritize the good of their state and citizens. This allows for the partiality of harming enemy noncombatants to protect one’s own people and state but the conflict between their morality as an individual and that based upon their special role remains. Still others – such as some political realists - propose that politics sometimes requires amoral decisions to trump - but not invalidate - morality so there is little-to-no moral fault to requisite immoral acts. Examining the role of “supreme emergency” in the survey is illustrative as the degree of unresolved immorality varies depending upon the ethical beliefs of the individual. The severity and type of threats which are believed to qualify as exceptional, whether the exceptionality of the situation is interpreted as well as applied to other states consistently and with coherence, and the perceived overall morality of such exceptional acts can help measure the ethic theory used and the degree of influence moral ideals played in the decision. Although there are many reasons why inconsistencies may not indicate moral indifference, there still must be a demonstrable, substantial, and consistent preference for upholding moral ideals in order for claims of exceptional necessity to be legitimate. Such instances should correlate with state security and not just any and all pursuits of national or individual self-interests. They should also correlate with perception of relative severity of threat - not everything that is undesirable can be a severe existential threat. The strongest litmus test for moral constraint is whether or not the most effective selfish option is selected despite it being immoral. Exceptional situations and inescapable conflicts between moral obligations act as “stress tests” that effectively elucidate beliefs and preferences. For example, the lower the threshold for what threat necessitates a coercive, violent, and aggressive response, the more zero-sum and conflict prone the world is perceived to be. The frequency of support for immoral uses of force in objectively-low severity of threat situations indicates its perceived acceptability and efficacy as a tool for resolving disputes and pursuing other national interests. If, instead, such uses were seen as legitimate self-defense due to a widespread high sensitivity to threat, then they would likely be considered moral. Understanding the role of morality in strategic preferences and behavior is more complex than whether or not support for the use of force as a tool of national power tended to be quick, frequent, and correlated with its perceived efficacy. Yet, it is difficult to gain deeper insight by looking at whether or not force was used or recommended to be used in a handful of case studies. The critical distinctions which validate beliefs by testing their roles and relationships according to the principles of impartiality, consistency, and coherence require details, context, and perspective that come from methodical examination and testing of how the use of force is considered. Such an approach makes it possible to measure, and thus account for, the range of views about what is clear self-defense, last resort, and an extreme and dire threat which can vary widely by individual, culture, and situation. It also provides the insight necessary to test the moral content of justifications for war and of motives such as reciprocity and efficacy. These kinds of quantifiable limits, unique to this study, are critical to considering the diversity of beliefs, expressions of values, and the complex reasoning found in humans without slipping into moral relativism. \nCONCLUSIONS \nIn a world that is becoming rapidly more interconnected and in which the balance of power is swiftly shifting, it is critical to understand a “rising” China’s strategic preferences in order to encourage peaceful and effective foreign policy engagements. This research fills scholarly gaps about Chinese strategic decision-making by creating targeted models that explain how the targeted population considers using force to address national security concerns. The data from a survey administered to students at six elite Chinese universities identify key variables that most shape and influence views on morality, the use of force, and the international system in the ideal and “real” worlds. Resultant models are then compared to established Western and Confucian ethical and international relations theories to determine the extent to which moral principles shape beliefs and effectively guide or constrain behavior. How results differ from the Confucian theory of international relations help understand how accurately current theories explain China’s actual strategic preferences. Thus, this research offers major contributions to the theoretical scholarship central to international security and Chinese strategic studies. \n'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 0, 'page_label': '1'}, page_content='Cadre and Personnel Management in the CPC \nKjeld Erik Brødsgaard\nChina: An International Journal, Volume 10, Number 2, August 2012,\npp. 69-83 (Article)\nPublished by NUS Press Pte Ltd\nDOI:\nFor additional information about this article\nhttps://doi.org/10.1353/chn.2012.0016\nhttps://muse.jhu.edu/article/482925\n[128.143.86.69]   Project MUSE (2025-06-23 20:22 GMT)  University of Virginia Libraries & (Viva)'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 1, 'page_label': '2'}, page_content='Cadre and Personnel Management in the  CPC 69\n© China: An International Journal\nCIJ Volume 10 Number 2 (August 2012): 69 – 83 69\nCadre and Personnel Management  \nin the CPC\nKjeld Erik BRØDSGAARD\nThis article addresses some of the most important mechanisms and instruments  \nin the Communist Party of China’s (CPC) management of key officials and \nadministrative personnel: Party and state cadres in administrative organs and \ninstitutions. These mechanisms include control over the administrative layout in \nterms of organs and positions (bianzhi), the authority to appoint leading personnel \n(nomenklatura), as well as a sophisticated cadre transfer system — which also \ninvolves rotation between big business and the political world. The article not only \nemphasises the crucial importance of cadre management in understanding the \nfundamentals of the Chinese power system, but it also points to a number of \nchallenges in studying this particular Chinese form of personnel management.  \nIt shows the elaborate nature of cadre and personnel management in China and \nargues that in recent years the Party has strengthened rather than weakened its role \nin managing the cadre corps. Finally, the article draws on theoretical insights \nprovided by the existing body of literature on elites in general and in relation to \nChina in particular. \nFor a Western scholar, studying the cadre and personnel management system ( ganbu \nyu renshi guanli zhidu ) in the Communist Party of China (CPC) is an endeavour \nfraught with difficulties. First and most basically, there is no clear definition of the \nconcept of cadre ( ganbu) available — making it extremely difficult to determine and \ndelimitate the field of study. Second, statistics and hard empirical data are not easy to \naccess — as information on cadre management often is classified neibu (internal) or \njimi (secret) — and therefore, in principle, unavailable to foreign researchers. Third, \nthe documents and regulations concerning cadre management use many concepts \nwhich are almost impossible to translate into Western languages and discourse. Never\xad\ntheless, as a deeper and more nuanced understanding of the Chinese political system \nrequires a basic understanding of cadre management, the subject has attracted growing \ninterest in the West. \nKjeld Erik Brødsgaard (keb.int@cbs.dk) is Professor and Director at the Asia Research Centre, the  \nCopenhagen Business School. He received his PhD in Modern China Studies from the University of \nCopenhagen. His current research interests include public management in China, the civil service sys\xad\ntem and administrative reform, cadre and personnel management, Party reform and Party\xadstate\xadbusiness \nrelations.\n[128.143.86.69]   Project MUSE (2025-06-23 20:22 GMT)  University of Virginia Libraries & (Viva)'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 2, 'page_label': '3'}, page_content='70 Kjeld Erik BRØDSGAARD\nMost studies on the Chinese cadre system fail to draw on the theoretical  \ninsights provided by the existing body of literature on elites in general,1 and in relation \nto China in particular. 2 This seems to be related to a number of factors. First, \nelite studies as such are currently a neglected discipline in political science research. 3 \nInstead, there is a focus on electoral systems and electoral behaviour, constitutional \nchoice and rational choice theory. Second, the implosion of communist/socialist  \nsystems in the Soviet Union and Eastern Europe destroyed much of the empirical \nbasis for theory generation and development in the field of comparative communist \nstudies. Third, since the 1960s, a number of often conflicting approaches to the  \nstudy of Chinese politics have emerged. Most of them have dealt with conflict  \nand change and the factors that seemingly make the system dysfunctional. Only  \nin recent years have some scholars argued that the political system is, in fact,  \nholding together rather well. 4 What makes the Party hold together is organisation \n1 See for example, Harold Lasswell and Daniel Lerner, World Revolutionary Elites (Cambridge, MA: MIT \nPress, 1965); Peter Bachrach, The Theory of Democratic Elitism: A Critique  (Boston and T oronto: Little, \nBrown and Company, 1967); Anthony Giddens, The Class Structure of The Advanced Societies (New York: \nHarper & Row, 1975); Robert D. Putnam, The Comparative Study of Political Elites (London: Hutchinson \n& Co., 1973); and Eva Etzioni\xadHalevy, The Elite Connection (Cambridge: Polity Press, 1993). On Soviet \nElites, see Seweryn Bialer, Stalin ’s Successor’s: Leadership, Stability, and Change in the Soviet Union (Cambridge: \nCambridge University Press, 1980); Jerry Hough, Soviet Leadership in Transition  (Washington, DC: \nBrookings Institution, 1980); and Steven L. Solcnik, Stealing the State: Control and Collapse in Soviet \nInstitutions (Cambridge, MA: Harvard University Press, 1998). On post\xadcommunist elites, see also Gil \nEyal, Ivan Szelenyi, and Eleanor T ownsley, Making Capitalism Without Capitalists: The New Ruling Elites \nin Eastern Europe (London: Verso Press, 1998).\n2 In the 1960s and 1970s, a number of pioneering studies on the Chinese elite system were published. \nSee, for example, the contributions to Robert A. Scalapino, Elites in the People’s Republic of China (Seattle, \nWA: University of Washington Press, 1972). See also A. Doak Barnett (with a contribution by Ezra \nVogel), Cadres, Bureaucracy, and Political Power in Communist China (New York: Columbia Press, 1967); \nMichel C. Oksenberg, “Local Leaders in Rural China, 1962–1965: Individual Attributes, Bureaucratic \nPositions, and Political Recruitment”, in Chinese Communist Politics in Action , ed. A. Doak Barnett \n(Seattle, WA: University of Washington Press, 1969), pp. 155–215; and Ying\xadMao Kau, “The Urban \nBureaucratic Elite in Communist China: A Case Study of Wuhan, 1949–1965”, in Chinese Communist \nPolitics in Action, ed. Barnett, pp. 216–70. \n3 This discussion draws on Kjeld Erik Brødsgaard, “From Lions to Foxes: Party and Cadres in China in \nthe Post\xadDeng Era”, unpublished manuscript, 2006.\n4 During the 1960s, this was actually one of the basic arguments underpinning Franz Schurmann’s pio\xad\nneering work on China, Ideology and Organization in Communist China (Berkeley: University of California \nPress, 1968), p. 1. More recently, this argument was made by Andrew Nathan, David Shambaugh, \nElizabeth Perry and Sebastian Heilmann, among others. See Andrew Nathan, “China’s Resilient  \nAuthoritarianism”, Journal of Democracy 14, no. 1 ( Jan. 2003): 6–17; Sebastian Heilmann and Elizabeth \nJ. Perry, eds., Mao’s Invisible Hand: The Political Foundations of Adaptive Governance in China (Cambridge, \nMA: Harvard University Press, 2011); and David Shambaugh, China’s Communist Party: Atrophy and \nAdaptation (Berkeley and Washington, DC: University of California Press and Woodrow Wilson Center \nPress, 2008).'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 3, 'page_label': '4'}, page_content='Cadre and Personnel Management in the  CPC 71\nand power — as embodied in the political elite. 5 Fourth, and finally, to the extent \nelite concepts are applied in the Chinese case, they tend to relate to studies of the \ncomposition and working of top government and Party organs such as the State \nCouncil, Politburo or Central Committee and their membership.6 Rarely are they used \nto discuss the wider group of cadres from which future leaders are recruited. This has \nunfortunately severely limited the usefulness of the elite concept in analysing how the \nChinese political system works. \nThe ConCePT of Cadre\nCadre (from Latin: quadrus = square) is originally a military concept. Its current use \ndenotes three main significances: (1) basic structure or framework; (2) a nucleus of \ntrained personnel around which a larger organisation can be built and trained; (3) a \nsmall, unified group organised to instruct or lead a larger group. In France, the term \nis often used to denote the officials and upper\xadlevel and middle\xadlevel managers educated \nat the grandes écoles. They are supposed to exhibit leadership qualities, predisposing \nthem to take up duties for the nation. 7 In communist one\xadParty systems, the concept \nrefers back to the Russian Revolution. In this sense, the cadres are the leaders of the \n5 It should be noted that, in this article, we are not concerned with new economic and social elite \nformations such as the private entrepreneurs and managers in foreign\xadfunded enterprises. These are \nimportant new social strata which the current leadership is trying to co\xadopt by recruiting them to become \nParty members. This attempt to bring new social strata into the elite underlines that we are dealing with \na relatively open pattern of elite recruitment in the Chinese case. Classical elite theorists emphasised that \nonly by being able and willing to absorb new elements and layers would a given power elite (e.g., \nPareto’s “governing elite” and Mosca’s “ruling class/political class”) be able to prevent regime change and \nthereby its own demise. See Pareto, The Mind and Society, vol. 3: Sentiment in Thinking (London: Jonathan \nCape, 1935); and Gaetano Mosca, The Ruling Class  (New York and London: McGraw\xadHill, 1939).\n6 See, for example, David M. Lampton’s study of six individuals who held top government and Party \npositions in the immediate post\xadMao era, in his Paths to Power: Elite Mobility in Contemporary China  \n(Ann Arbor, MI: University of Michigan Center for Chinese Studies, 1986); Cheng Li and David  \nBachman’s study of the social background and career pattern of 247 Chinese mayors in “Localism,  \nElitism, and Immobilism: Elite Formation and Social Change in Post\xadMao China”, World Politics 42, \nno. 1 (Oct. 1989): 64–94; and Cheng Li’s and Lynn White’s analysis of the composition of the 15th \nCentral Committee in Cheng Li and Lynn White, “The Fifteenth Central Committee of the Chinese \nCommunist Party: Full\xadFledged T echnocratic Leadership with Partial Control by Jiang Zemin”, Asian \nSurvey 38, no. 3 (Mar. 1998): 231–64. Other studies of the CPC Central Committee include Xiaowei \nZang, “The Fourteenth Central Committee of the CPC: T echnocracy or Political T echnocracy”, Asian \nSurvey 33 (Aug. 1993): 787–803 and David Shambaugh, “The CPC’s 15th Party Congress: T echnocrats \nin Command”, Issues and Studies  34, no. 1 (1998): pp. 1–37. See also Alice Miller’s and Cheng Li’s \narticle in China Leadership Monitor , e.g. Alice Miller, “The 18th Central Committee Politbureau: A \nQuixotic, Foolhardy, Rashly Speculative, but Nonetheless Ruthlessly Reasoned Projection”, China Leader\xad\nship Monitor 33 ( June 2010), and Cheng Li, “China’s Midterm Jockeying: Gearing Up for 2012: Cabinet \nMinisters”, China Leadership Monitor  32 (May 2010).\n7 See Pierre Bourdieu, The State Nobility (Cambridge: Polity Press, 1996).\n[128.143.86.69]   Project MUSE (2025-06-23 20:22 GMT)  University of Virginia Libraries & (Viva)'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 4, 'page_label': '5'}, page_content='72 Kjeld Erik BRØDSGAARD\nrevolution and the masses the followers. In his famous organisational manual, What \nis to Be Done?, Lenin describes how such a vanguard of the revolutionary class should \nbe created and trained to lead the revolution. 8 This vanguard was supposed to act as \nthe central nucleus of the Party and was expected to “devote to the revolution not \ntheir free evenings — but their whole life”. 9 These revolutionaries were regarded as \nthe “lions” of the communist movement. 10\nAfter the 1949 revolution in China, cadres usually referred to people with  \nresponsible or leading positions ( fuzeren/lingdaoren) within an organisation, or people \nwho assumed responsibility for specific political tasks. Accordingly, a person’s status \nas a cadre did not necessarily involve membership of the CPC, although in practice \nthis was often the case, especially for leading cadres (i.e., cadres above the county\xadlevel).\nDuring the 1950s, there was a regularisation of the cadre corps. A complex wage \nsystem was established and a more detailed ranking system was introduced. According \nto a Party handbook published in 1958, cadres included the following personnel:  \n(1) employees from clerical personnel and above; (2) industrial technicians; (3) agro\xad\ntechnicians; (4) maritime technicians; (5) public health technicians of middle level \nand above; (6) scientific technicians; (8) news and publishing personnel; (8) teaching \npersonnel; (9) personnel in culture and the arts; (10) and translators. 11 In short, \ncadres were defined by simple bureaucratic distinctions according to their education \nand whether or not they were employed by the state.\nSince then, there has been no fundamental change in this categorisation.  \nHowever, all along an undercurrent of doubt has existed as to whether such a purely \nbureaucratic distinction would suffice and therefore regular ideological campaigns  \nhave been conducted to ensure the continuous political and ideological education and \ntrain ing of cadres and to prevent the revolutionary “lions” from turning into bureau\xad\ncratic “foxes”. Also internal distinctions have been introduced to distinguish different \ncategories of cadres. The most important is the distinction between ordinary cadres \nand leading cadres. 12 Leading cadres ( lingdao ganbu ) are cadres ranked at division \n8 See Lenin, What is to be Done?: Burning Questions of Our Movement  (Beijing: Foreign Languages Press, \n1973, originally published 1902).\n9 Ibid., p. 225. \n10 Pareto’s famous distinction between “lions” and “foxes” in elite terms appears in §2178 in Volume \nFour of The Mind and Society  entitled General Form of Society .\n11 See Ezra F . Vogel, “From Revolutionary to Semi\xadBureaucrat: The ‘Regularisation’ of Cadres”, The \nChina Quarterly 29 (Mar. 1967): 36–60.\n12 Actually, classical elite theorists such as Wilfredo Pareto and Gaetano Mosca also seem to indicate \na differentiation between two strata in the elite. Pareto argues: “So we get two strata in the population: \n(1) A lower stratum, the non\xadelite, with whose possible influence on government we are not just  \nhere concerned: then (2) a higher stratum, the elite, which is divided into two: (a) a governing elite:  \n(b) a non\xadgoverning elite”. In this Paretian sense, the leading cadres would form the governing elite. See \nWilfredo Pareto, The Mind and Society , vol. 3, §2034. For a discussion on Mosca’s theory in relation to \na possible “second stratum”, see T om Bottomore, Elites and Society (Harmondsworth, UK: Penguin Books, \n1966), p. 11.'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 5, 'page_label': '6'}, page_content='Cadre and Personnel Management in the  CPC 73\n(county) level and above. They form the power elite in Anthony Gidden’s definition \nof the concept. 13\nnuMber of Cadres\nAs it is difficult to define the concept of cadre, it is concomitantly not easy to find \nreliable information on the number of cadres in China. In 2000, the CPC Party History \nPublishing House published a 19\xadvolume publication on the organisational history  \nof the CPC, which contains statistics on the evolution and composition of Chinese \ncadres from 1949 to 1998.14 According to this source, there are 40.5 million c adres in \nChina. “Leading cadres” number 508,025, accounting for only eight per cent of the \ntotal cadre corps. Fully 92 per cent (466,355) of these people work at the provincial \nlevel and below, such as local city and county Party secretaries and mayors; the rest \nwork in the central organs in Beijing. \nThe most important leading cadres are those at the ministerial (provincial) level \nand above. Since central ministers, provincial governors and first Party secretaries are \nat the same administrative rank, this level includes present as well as former cabinet \nministers and provincial governors and Party secretaries. There are only 2,562 of these \n“high level cadres” ( gaoji ganbu ), of which 888 work at the Centre ( Zhongyang) in \nBeijing.15 They all belong to the Central Committee’s nomenklatura. \nOf the total number of cadres, 47.5 per cent or 19.2 million work in the  \nso\xadcalled shiye danwei (public service units or non\xadprofit organisations), 35.2 per cent \nor 14.3 million in production enterprises and 17.2 per cent or 7.0 million in govern\xad\nment and Party organs.16 Cadres in government and Party organs and agencies are the \n13 Giddens distinguishes between open and closed elites with high or low integration. As the Chinese \npower elite have a relatively open pattern of recruitment and a high level of integration, it is a “solidary \nelite” in Gidden’s definition of the concept. Moreover, as the power of the Chinese elite seems to be \nconcentrated and as the issue\xadstrength of its power must be characterised as broad, it is an elite which \nholds autocratic power. See Anthony Giddens, The Class Structure of the Advanced Societies  (New York: \nHarper & Row, 1975). One might add that as new social groups and strata such as private entrepreneurs \nand non\xadCPC cadres make it to the elite, it will increasingly turn into an oligarchic mode of power\xad\nholding (limited issue\xadstrength).\n14 See Zhonggong zhongyang zuzhibu, Zhonggong dangshi yanjiushi, and Zhongyang dang’an guan \n(Central Organization Department of the CPC, Research Office of CPC Party History, and Bureau of \nCentral Archives), Zhongguo gongchandang zuzhishi ziliao, 1921–1997, fujuan 1  (Material on the Organ\xad\nisational History of China’s Communist Party, 1921–1997, Appendix, vol. 1 ) (Beijing: Zhonggong dangshi \nchubanshe, 2000), pp. 1325–432. For a discussion of this material, see Kjeld Erik Brødsgaard, “From \nLions to Foxes: Party and Cadres in China in the Post\xadDeng Era”.\n15 Zhonggong zhongyang zuzhibu, Zhongguo Gongchandang zuzhishi ziliao, 1921–1997, fujuan 1, p. 1357.\n16 The Chinese state comprises three main institutional components: administrative organs ( xingzheng \njiguan), public institutions or public service units ( shiye danwei ) and economic enterprises ( qiye). Shiye \ndanwei include primary schools, secondary schools and universities, hospitals, healthcare organisations, \nresearch organisations, and organisations in culture, art and mass media. They are different from admin\xad\nistrative organs in the sense that they do not have administrative power over other administrative bodies, \nand they are different from economic enterprises in the sense that they are not profit\xadoriented. Therefore, \n[128.143.86.69]   Project MUSE (2025-06-23 20:22 GMT)  University of Virginia Libraries & (Viva)'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 6, 'page_label': '7'}, page_content='74 Kjeld Erik BRØDSGAARD\nbackbone of the political system. They are also called “civil servants” ( gongwuyuan) \nand are regulated by the civil service administrative system in addition to  being man\xad\naged by the CPC’s cadre regulations. According to some sources, the number of civil \nservants has risen to about 10 million. 17\nIt is often assumed that most cadres are members of the CPC. However, the \n2000 statistics showed that only 15.4 million (38.2 per cent) of the 40.5 million\xadstrong \ncadre corps are Party members. However, among leading cadres, 95.3 per cent are \nParty members.18 The power elite are recruited from the 15.4 million cadres that carry \na Party membership. Therefore, cadres with an ambition to make it to the power elite \nnormally apply for membership of the Party. This means that in order to qualify for \nentrance into the power elite, a given individual should combine cadre status with \nParty membership. It follows logically that Party membership alone is not enough to \nqualify for elite status.\nIn short, the power hierarchy is structured in the following way: there are  \n60 million Party members (1998). Of these, 15.4 million (25 per cent) are cadres. \nThe remaining 45 million do not have cadre status, i.e., they do not hold positions \nthat involve real authority. The leading cadres constitute 508,025 people (3.3 per cent) \nof the 15.4 million cadres. Furthermore, the power elite consist of those among the \nleading cadres that hold Party membership. Since 95.3 per cent of the leading cadres are \nParty members, the power elite consists of 484,148 cadres . The very top stratum — the \n2,562 gaoji ganbu — are all Party members. Of these individuals, 888 work at the \ncentre of power in Beijing. This is the “elite within the elite” — those who really run \nChina. One way to conceptualise this power structure can be depicted in Figure 1.\nRecruitment to the top levels of the pyramid takes place at the bottom level, \nwhere non\xadCPC cadres with an ambition to make it to the power elite will apply for \nParty membership. T o qualify for entrance into the power elite requires both cadre status \nand Party membership. For the very few leading cadres that have not yet become Party \nmembers, this is their last chance. If they do not succeed, they will not move further \nup the power hierarchy since bureau\xadlevel cadres are almost entirely recruited from \nleading cadres that carry a Party membership. Only in rare instances is it possible for \nnon\xadCPC cadres to enter the ministerial\xadlevel of the power hierarchy. But it does occur \non occasion. Recent examples include the appointment of Wan Gang as Minister of \nScience and T echnology and the appointment of Chen Zhu as Minister of Health. \nTheir appointments were part of a mid\xadterm move under Hu Jintao to empower the \nthe translation of shiye danwei  is sometimes rendered as non\xadprofit organisations. See Lam Tao\xadChiu \nand James L. Perry, “Service Organizations in China: Reform and Its Limits,” in Remaking China’s \nPublic Management, ed. Peter Nan\xadShong Lee and Carlos Wing\xadHung Lo (Westport, CT: Quorum Books, \n2001), pp. 19–40. See also Kjeld Erik Brødsgaard and Chen Gang, “Public Sector Reform in China: \nWho is Losing Out?” (forthcoming).\n17 See Kjeld Erik Brødsgaard and Chen Gang, “China’s Civil Service Reform: An Update”, EAI Background \nBrief No. 493, 16 Dec. 2009.\n18 Zhonggong zhongyang zuzhibu, Zhongguo Gongchandang zuzhishi ziliao, 1921–1997, fujuan 1, p. 1358.'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 7, 'page_label': '8'}, page_content='Cadre and Personnel Management in the  CPC 75\nChinese People’s Political Consultative Congress (CPPCC) and give credence to the \ntheory of “multi\xadparty cooperation” ( duo dang hezuo ). However, since these men are \nnot Party members, they cannot occupy the important Party secretary job in their \nrespective ministries, and this severely restricts their actual powers.\nClearly, the power elite are dependent on the 40.5 million cadres for governing \nthe country and in recruiting future leaders. Active support is also needed from the \n45 million Party members that are not part of the state administrative bureaucracy. \nThey may not be in positions of real authority, but they are considered to form the \nsocial and ideological basis of the power system. Moreover, when a Party member \nenters the cadre corps, his chances for promotion to the power elite are comparatively \nhigh. In general, as long as these two groups act in concert, the power system can be \nmaintained.\nNomenklatura\nIn managing the leading cadres, the CPC has a number of instruments at its disposal. \nIn terms of leadership selection and appointment, the most important is the so\xadcalled \nnomenklatura system. The term is originally Russian and developed during the Soviet \nUnion. It can be defined as “a list containing those leading officials directly appointed \nby the Party, as well as those officials about whom recommendations for appoint\xad\nment, release or transfer may be made by other bodies, but which require the Party’s \napproval”.19 This means that the nomenklatura list actually consists of two lists: one \n19 See Kjeld Erik Brødsgaard, Hainan — State, Society, and Business in a Chinese Province  (London: \nRoutledge, 2009), p. 80. \nfigure 1. The Chinese Power Pyramid\n[128.143.86.69]   Project MUSE (2025-06-23 20:22 GMT)  University of Virginia Libraries & (Viva)'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 8, 'page_label': '9'}, page_content='76 Kjeld Erik BRØDSGAARD\nwhich is solely handled by the Organisation Department of the Party, and another \nwhich involves management by other state and Party organs. The Party mainly has its \nfocus on the former list, but does have the possibility of exercising veto power over \nthe latter list. Moreover, the nomenklatura system includes lists of personnel recom\xad\nmended for future appointment. Through this elaborate system, the Party controls \nthe selection and appointment of leaders to the most important positions in Chinese \nsociety. At the central level, the Organisational Department of the Central Committee \nmanages a list of top positions in government and Party organs at the central and \nprovincial level, as well as the heads of the most prestigious institutes of higher learning \nand the 53 largest companies. As the nomenklatura system is a system for leadership \nselection and appointment, non\xadParty cadres in leading positions are also managed by \nthe nomenklatura.20\nThe concept of bianzhi is closely related to nomenklatura. In fact, some scholars \nof Chinese politics have perceived bianzhi to be the Chinese way of denoting the \nnomenklatura system.21 This is not correct. Bianzhi usually refers to the authorised \nnumber of personnel in a unit, office, or organisation and associated budget outlays \nin the form of salary and allowances.22 The term is often translated as “establishment”. \nThere are three main forms of bianzhi: administrative bianzhi (xingzheng bianzhi), \nenterprise bianzhi (qiye bianzhi), and the bianzhi which applies to public service units \n(shiye danwei  bianzhi). The administrative bianzhi is crucial for the layout of the \npolitical system. It stipulates the number of organs ( jigou bianzhi ) and the number \nof personnel ( renyuan bianzhi ) in these organs. The difference between bianzhi and \nnomenklatura is that a bianzhi list specifies and ranks the various organs and positions \nin an administrative setup, including detailing the administrative functions of these \norgans, whereas the nomenklatura list specifies which leadership positions in the bianzhi \nconfiguration the Party controls. The bianzhi system is managed by the Central Com\xad\nmission for Institutional Bianzhi (Zhongyang jigou bianzhi weiyuanhui) which is placed \ndirectly under the Party’s Central Committee and is thus managed and controlled by \nthe Party.23 At the provincial and local levels, there are also committees dealing with \nbianzhi work. As is the case for local nomenklatura work, they are directed by local \nParty committees. \nIn sum, by regulating and managing the bianzhi as well as the nomenklatura, \nthe Party exercises control over the entire administrative apparatus and its cadre  \ncorps from central to local level. Personnel policy is the heart of power in a Leninist \nsystem. \n20 The Chinese concept for nomenklatura is zhiwu mingcheng biao ( job title list). However, on occasion, \nthe expression yaozhi xulie (order of key posts) is used to express the same phenomenon.\n21 The widespread confusing of bianzhi and nomenklatura appears to originate in Franz Schurmann’s \nseminal work, Ideology and Organization in Communist China , op cit.\n22 For further elaboration of the bianzhi system, see Kjeld Erik Brødsgaard, “Institutional Reform and \nthe Bianzhi System in China”, The China Quarterly  170 ( June 2005): 361–86.\n23 See Brødsgaard, Hainan — State Society and Business in a Chinese Province , p. 80.'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 9, 'page_label': '10'}, page_content='Cadre and Personnel Management in the  CPC 77\nroTaTion and Transfer\nOne instrument of control associated with the nomenklatura system is the so\xadcalled cadre \ntransfer system.24 For leading cadres below ministerial and vice\xadministerial level, the \nrules are that they have to be transferred after their second term, i.e., after a maximum \nperiod of 10 years. 25 They will either be transferred to a new higher\xadranked job or \nstay at the same level, but without leadership responsibility. Recently, a new form of \nrotation has been introduced according to which central officials are rotated to local levels \nin order to take up local top positions ( di yi bashou ) as mayor or county head. 26 In \nthe same way, local leaders are transferred to central positions. It is reported that local \nofficials’ enthusiasm to take positions at the central level is quite high, but the same \nenthusiasm is not reached among officials at the central level. The problem seems to be \nthat if a person is not transferred temporarily while maintaining employment (bianzhi) \nin his/her original work unit ( guazhi), but is actually assuming a leadership position \nat the local level ( renzhi), he/she is not guaranteed a return to the central level.\nPantouflage\nAn interesting form of rotation takes place between big business and the political world. \nThus, government officials can be transferred to take up leading positions in the state\xad\nowned companies and vice versa. This kind of rotation has certain parallels to the \nFrench system of appointing members of the civil service elite to one of the country’s \ntop business positions after having spent a decade or so working for the state, often \nin a ministerial private office — a practice known as pantouflage (literally “shuffling \nacross”).27 These civil servants are all educated at French prestigious grande écoles which \ngive access to the grands corps; from there, they are “parachuted” into top business. \nSo attendance at a leading grande école followed by membership of the grands corps \nprovides one of the most secure routes to the top of the French business hierarchy. In \nJapan, the term amakudari denotes the widespread practice of senior officials taking \nup positions upon retiring from government. 28 In the United States, the “revolving \ndoor” between the bureaucracy and the business world is commonplace, whereas in \nthe Nordic countries, this practice is rarely seen.\n24 See the “Danzheng lingdao ganbu xuanba renyong gongzuo tiaoli” (Regulations on Selection and \nAppointment of Party and Government Leading Cadres), in Renshi gongzuo wenjian xuanbian  (Selected \nDocuments on Personnel Work) (Beijing: Renshibu zhengce fagui si, 2003), pp. 8–27.\n25 “Dangzheng lingdao ganbu zhiwu renqi zanxing guiding” (Preliminary Regulations on the Job T enure \nof Party and State Leading Cadres), 4 July 2006.\n26 “Xin yi lun zheng siji zhongyang he defang guanyuan jiaoliu renzhi qidong” (A New Round of Rotation \nBetween Central and Local Officials Starts), at <http://news.sina.com.cn/c/2011\xad03\xad31/011122210698.shtml> \n[21 May 2011].\n27 See Mairi MacLean, Charles Harvey and Jon Press, “Elites, Ownership and the Internalisation of \nFrench Business”, Modern and Contemporary France  9, no. 3 (2001): 313–25.\n28 See Ulrike Schaede, “The ‘Old Boy’ Network and Government\xadBusiness Relationships in Japan”, \nJournal of Japanese Studies  21, no. 2 (Summer 1995): 293–317.\n[128.143.86.69]   Project MUSE (2025-06-23 20:22 GMT)  University of Virginia Libraries & (Viva)'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 10, 'page_label': '11'}, page_content='78 Kjeld Erik BRØDSGAARD\nIn the Chinese case, examples of pantouflage include Li Lihui’s transfer in 2004 \nfrom vice\xadgovernor of Hainan province to the position of president of the Bank of \nChina, or when Zhang Qingwei in 2008 was moved from serving as Minister of the \nCommission of T echnology, Science and Industry for Defence to the corporate world \nto become chairman of the newly formed Commercial Aircraft Corporation of China.29 \nA third example is Zhou Yongkang who was appointed Vice\xadMinister of the Ministry \nof Petroleum in 1985. When this ministry was abolished in 1988, Zhou Yongkang \nwas appointed deputy general manager of the newly formed China National Petroleum \nCorporation and he advanced to become general manager of the corporation in 1996. \nT wo years later, he was appointed Minister of Land and Resources and returned to \ncentral government work. Subsequently, Zhou was promoted to the Political Bureau \nand put in charge of the politics and law system ( zheng\xadfa xitong), particularly public \nsecurity.\nIn China, there are even more examples of the reverse process, i.e., top business \nleaders moving into state and Party leading positions. Examples include Xiao Yaqing \nwho worked as President of the Aluminium Corporation of China (CHINALCO) \nbefore he was transferred in February 2009 to Deputy General Secretary of the State \nCouncil. In 2003, Wei Liucheng was transferred serving as General Manager of the \nChina National Offshore Oil Corporation (CNOOC) to become Governor of Hainan \nProvince. Chen Chuanping was transferred from being Chairman of Taiyuan Steel \nCompany to serve as the Vice\xadGovernor of Shanxi. And recently, Sinopec CEO Su \nShulin became the Governor of Fujian. There are many more similar examples. In \nfact, a closer look at the biographies of China’s governors and vice\xadgovernors reveals \nthat as many as 52 of them have a business background. In government, 25 ministers \nand vice\xadministers worked in business before joining the Party. 30 This shows that \nParty and state organs increasingly use the large business groups as a recruitment  \nbase for filling important state and Party positions and it is a clear example of the \nParty’s continued authority in rotating its talents among different sectors of society \nand economy.\nCEOs who move to a government position acquire a bureaucratic ranking  \nwhich is highly coveted in China and compensates for the fact that they experience a \nsubstantial drop in salary. They keep their rank when they move back to business. \nHowever, the effect of this is mitigated by the fact that informally bureaucratic ranking \nstill takes place among Chinese SOEs and their CEOs and board chairmen, even \nthough the system was announced to be abolished already in 2001. 31 An indication \nof the continued impact of administrative ranking is that leaders of the nomenklatura \n29 Kjeld Erik Brødsgaard, “Politics and Business Group Formation in China: The Party in Control?”, \nThe China Quarterly  (forthcoming, 2012).\n30 Author’s database.\n31 “2001–20210 nian shenhua ganbu renshi zhidu gaige guihua gangyao” (Plan for Deepening the \nCadre Management System During the 2001–2010 Period), at <http://www.tyxdj.gov.cn/html/djjj/\nggtz/090802\xad2.html>.'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 11, 'page_label': '12'}, page_content='Cadre and Personnel Management in the  CPC 79\ncompanies can be moved to positions of vice\xadministerial or ministerial level, 32 but \nbureaucrats at ministerial level can normally not be rotated to a business position. The \ncareer paths of Zhang Qingwei and Zhou Yongkang show that it is possible to move \nfrom a government position to a position in business and back again, or from business \nto government and back again — further illustrating the “revolving door” between \nParty, government and big business in China. 33 In France, pantouflage occurs among \ngraduates of the elite grande écoles . In China, the precondition for pantouflage is \nmembership of the CPC. Thus all CEOs of the central corporations under control  \nof the State Assets Supervision and Administration Commission (SASAC) are senior \nParty members.\nTheir Party positions are the reason why they can be moved to take up positions \nwhich do not make much sense from a business point of view. A case in point is  \nthe 2004 reshuffle of the top executives of the three Chinese telecommunication \ncompanies, which took place almost overnight and without prior notice to the public \nshareholders.34 The incident was a clear demonstration of the Party’s authority over \nleadership appointment in the nomenklatura companies. Similar display of ultimate \nParty power over the business world occurred in December 2008 when China Eastern \nAirlines CEO, Li Fenghua, was replaced by the Chairman of China Southern Airlines, \nLiu Shaoyong, and the Deputy General Manager of Air China swapped positions with \nthe Deputy Party Secretary of China Eastern, Gao Jianxiong. The most recent example \noccurred in April 2011 when Fu Chengyu, Chairman and Party Secretary of CNOOC, \nwas suddenly appointed Chairman and Party Secretary of rival oil company Sinopec. \nAt the same time, it was announced that the new chairman and Party Secretary  \nof CNOOC would be Wang Yilin, the former Deputy General Manager at China \nNational Petroleum Corporation (CNPC), the third major oil company. It is hard to \nimagine such reshuffles taking place without strong political considerations. \nThe “revolving door” function in practice, however, is shrouded in mystery. The \nexamples mentioned above all comprise officials and business leaders at ministerial or \nvice\xadministerial level. Thus they will all be on the central nomenklatura managed by \nthe Central Organisation Department ( Zhongyang Zuzhi Bu ). But how this Depart\xad\nment makes its decisions to rotate leaders between the political world and the business \nworld is unknown to outside observers. As scholars have no way of knowing the reasons \nand background for these rotations and transfers, many resort to prosopographical \nstudies of Chinese political and business elites, constructing career and networks  \ndatabases of individual top leaders. The result is the proliferation of factional studies \nof a highly speculative nature.\n32 Examples include the move of Li Peng’s son Li Xiaopeng from Huaneng to become Vice\xadGovernor \nin Shaanxi province.\n33 Recently Zhang Qingwei was moved from COMAC to become Governor of Hebei province.\n34 See Randall Morck, Bernard Yeung, and Minyuan Zhao, “Perspectives on China’s Outward Foreign \nDirect Investment”, Journal of International Business Studies  39 (2008): 337–50.\n[128.143.86.69]   Project MUSE (2025-06-23 20:22 GMT)  University of Virginia Libraries & (Viva)'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 12, 'page_label': '13'}, page_content='80 Kjeld Erik BRØDSGAARD\nThe Civil serviCe sysTeM\nIn 1993, in order to “separate Party and government” ( dang\xadzheng fenkai ), China \nintroduced a civil service system. In 2005, preliminary civil service regulations were \nturned into a Civil Service Law. 35 By now, a series of laws and regulations exists per\xad\ntaining to the functioning and authority of the civil servants. 36 It seems clear that all \ncivil servants are considered cadres and are therefore also regulated by cadre regulations. \nIn fact, the new Civil Service Law of December 2005 stipulates that when other \nregulations concerning the appointment, dismissal and supervision of leading civil \nservants exist, then these regulations apply. By this formulation, it is indicated that \nthe Party’s regulations for leading cadres take priority over the Civil Service Law.\nCivil servants form the backbone of the Chinese bureaucracy. They are the  \nprimary instrument by which the Party governs and controls the country. However, \nsimilar to the number of cadres, an exact estimation of the number of civil servants \nis difficult to estimate with any precision. Even the Chinese authorities do not appear \nto know. If we use the category of “employees in organs of the Communist Party of \nChina, government agencies, People’s Political Consultative Conference, democratic \nparties, non\xadgovernmental organisations, and religious organisations” and deduct the \nnumber of logistical personnel, one arrives at 10.1 million civil servants serving  \nnationally.37 It is noteworthy that the concept of the civil servant covers all state \nemployees from a section ( ke) member to the Prime Minister and President of the \nPeople’s Republic of China. Thus, the President is remunerated according to general \ncivil service wage stipulations. \nThis leadership system is completely different from that of the West. In China \na prospective leader starts as a section member in a Party or State organ and works \nhis way up the hierarchy as section leader, division leader, department leader, minister \nand finally may become Prime Minister or President. In short, leadership selection \nand promotion occur as a vertical process within the bureaucratic apparatus — whereas \nin Western countries, leaders enter the top of the power pyramid horizontally as a result \nof elections. \nThe result is a leadership selection and promotion system where top leaders  \nare not “helicoptered” into top position, but work their way up through the system \nobserving certain rules and norms concerning age, educational qualifications, as well \nas gender and nationality distribution. It is a leadership system characterised by regular \nevaluation by colleagues and superiors and continuous training in Party schools and \n35 “Zhonghua Renmin Gongheguo gongwuyuan fa” (The Civil Service Law of the People’s Republic of \nChina), in Renshi gongzuo wenjian xuanbian  (Selected Documents on Personnel Work ) (Beijing: Renshibu \nzhengce faguisi, 2006), vol. 28, pp. 56–77.\n36 See, for example, “Gongwuyuan zhiwu renmian yu zhiwu shengjiang guiding (shixing)” (Regulation \non the Appointment, Dismissal, Promotion, and Demotion of Civil Servants [T rial]), issued by the CPC \nCentral Organization Department and the Ministry of Personnel, 29 Feb. 2008.\n37 See Brødsgaard and Chen Gang, “China’s Civil Service Reform”.'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 13, 'page_label': '14'}, page_content='Cadre and Personnel Management in the  CPC 81\nvarious training centres for civil servants. 38 T op civil servants and business leaders are \neven sent abroad on month\xadlong intensive training courses where they learn about \nalternative political, economic and social models and international management  \npractices. The University of Cambridge, Harvard University and the Copenhagen \nBusiness School all run such programmes. It is a system where state and Party cadres \nare not promoted according to popular support and appeal, but according to inner\xad\nParty norms of behaviour and political orientation.\ndiffiCulTies and Challenges\nOn paper, this system looks extremely impressive. It portrays a meritocratic leadership \nsystem where chance, luck and sudden political fashion and impulses play a lesser role \nthan in the West. The main drawback is the lack of accountability and transparency \nin the decision\xadmaking process. How are decisions made and by whom according to \nwhich fields of decision\xadmaking? An example: in the West, business leaders are not \nonly evaluated by the board of their companies, they are ultimately evaluated by the \nreaction by the market to the decisions they make. Politicians are not only evaluated \nby their constituencies, but also by the media and public opinion. In China, in the \nabsence of such public mechanisms of evaluation, the Party and state personnel systems \nmake these determinations. Bo Xilai, Chongqing’s recently suspended Politbureau \nmember, attempted to go beyond these norms and instead tried to establish his own \npolitical platform based on popular support. If he had succeeded in obtaining a seat \non the standing committee of the Politbureau, it would have seriously undermined \nthe promotion and appointment system within the Party. The Bo Xilai debacle also \nhighlights the danger of corruption. This is a phenomenon which threatens Party \nlegitimacy and its capacity to govern. Sensing the potential problem, in October  \n2004, Vice President Zeng Qinghong warned in an important article published in  \nthe People’s Daily that maintaining and actually strengthening the capacity to rule was \na “life\xadand\xaddeath” matter for the CPC and its cadres. 39\nIt is also not clear whether Chinese officials are to be classified as civil servants \nor cadres. In 2008, a semi\xadindependent State Bureau of Civil Servants was established \nwithin the Ministry of Human Resources and Social Security indicating that civil \nservants should be managed by the state’s personnel departments. However, regulations \npertaining to civil servants are often issued in the name of the State Council as well \nas in the name of the CPC Central Organisation Department. This reinforces the \n38 See Frank Pieke, The Good Communist: Elite Training and State Building in T oday’s China (Cambridge: \nCambridge University Press, 2009); David Shambaugh, “T raining China’s Political Elite: The Party School \nSystem”, The China Quarterly  (Dec. 2008); Gregory Chin, “Innovation and Preservation: Remaking \nChina’s National Leadership T raining System”, The China Quarterly  (Mar. 2011); Charlotte Lee, “Party \nAdaptation, Elite T raining, and Political Selection in Reform\xadEra China”, PhD diss., Department of \nPolitical Science, Stanford University, 2010.\n39 People’s Daily, 8 Oct. 2004.\n[128.143.86.69]   Project MUSE (2025-06-23 20:22 GMT)  University of Virginia Libraries & (Viva)'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 14, 'page_label': '15'}, page_content='82 Kjeld Erik BRØDSGAARD\nview that civil servants are still primarily regarded as cadres and therefore primarily \nmanaged by cadre regulations and ultimately the Party and not the State. A recent \ntrend among Party officials is in fact to restrict the concept of cadres to cover only \ncivil servants, i.e., the core bureaucracy.\nFor Westerners studying civil servants, cadres and cadre management in China, \na major obstacle is to understand the precise meaning of Chinese administrative  \nconcepts. Examples include concepts such as bianzhi, kou and xitong. Distinctions \nbetween, for example, xuanren and weiren, pinren and pinyong, and guazhi and renzhi, \nas well as between the various methods of evaluation and appraisal, are also not easily \nunderstood. These difficulties point to the necessity of conducting more indigenous \nresearch, i.e., understanding Chinese administrative terms and practices from within \nbefore attempting a translation into Western terms. T oo many Western researchers  \ndo not take Chinese administrative concepts seriously, claiming that the key to an \nunderstanding of how China works is not official concepts, but informal practices and \nnetworks.\nCadre develoPMenT and TalenT\nThe recent promulgation of a plan for managing cadres over the coming decade  \nunderlines the regime’s concern about cadre management. 40 The plan stipulates that \n“the key lies in building a high\xadquality cadre contingent that include Party and  \ngovernment cadres, cadres in management functions in enterprises and cadres in  \nthe area of science and technology”. Thus the cadre management system will continue \nto function in both Party and government as well as in enterprises and in the research \nand educational area. The system is not only a control system, but also a method to \ndevelop and train talent. This is a key aspect of current cadre management in China. \nWhether the system develops in the direction of resilient authoritarianism or com\xad\npetitive authoritarianism, the quality of public officials is of outmost importance. In \nthis respect, China has learned from the Singapore model, a good example of how \ncompetitive authoritarianism can develop into a long\xadterm solution. 41\nConClusion\nCadres in China have become better educated and are younger than the case in Mao’s \ntime. About 80 per cent of leading cadres (defined as cadres at county level and above) \nhave some kind of college education, and as for ju\xadlevel cadres, the proportion is \n88 per cent. Clearly age and education play a key role in selecting new leaders at the \n40 “2010–2020 nian shenhua ganbu renshi zhidu gaige guihua gangyao” (Plan for Deepening the Cadre \nManagement System During the 2010–2020 Period) (21 Dec. 2009), at <www.changdedj.net/art/2010/7/2/\nart_23449_474973.html>.\n41 On the concept of “competitive authoritarianism”, see Steven Levitsky and Lucan A. Way, Competitive \nAuthoritarianism: Hybrid Regimes after the Cold War  (Cambridge: Cambridge University Press, 2010).'), Document(metadata={'producer': 'Project MUSE', 'creator': 'PyPDF', 'creationdate': '', 'author': 'Kjeld Erik Brødsgaard', 'language': 'English', 'title': 'Cadre and Personnel Management in the CPC', 'xmp-dc:creator': 'Kjeld Erik Brødsgaard', 'xmp-dc:language': 'English', 'xmp-dc:title': 'Cadre and Personnel Management in the CPC', 'source': '/Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf', 'total_pages': 16, 'page': 15, 'page_label': '16'}, page_content='Cadre and Personnel Management in the  CPC 83\nvarious levels of the system and there is a new meritocratic political elite emerging \nwhich is different in outlook and background from the revolutionary “lions” of the past. \nNew guidelines and regulations have been adopted with stipulations concerning open \nappointment and selection of cadres and filling of official positions and examination. \nThese include a “public notification system” for filling positions below ting\xadlevel and \nexperiments with multi\xadcandidate elections for leading government and Party posts; \nregular job rotation from section level and above; strengthening the supervision  \nof cadres by introducing clear measures for performance evaluation combined with \npublic feedback on the quality of work done. There will also be flexible remuneration \nand pecuniary rewards to high performers. Finally, open recruitment notices for CEO \nrecruitment to a number of SASAC companies have recently been introduced.\nHowever, the nomenklatura system is still in place — and, in recent years, the \nParty has actually strengthened its role in managing the cadre force. This is especially \nthe case for the leading cadres, which form the political elite that rule China. The \nParty instinctively knows that if it loses control of its cadres, it risks losing control of \nthe country. Moreover, in recent years, the Party’s Organisation Department has been \ninvolved in drawing up and circulating all major guidelines for cadre management at \ncentral as well as at local levels. The Party is clearly not about to loosen its grip on \nhow China’s future elite is selected and trained.\nThe majority of the rank and file cadre corps does not hold Party membership. \nThus, there is no direct correlation between the number of cadres and the number of \nParty members. However, more than 95 per cent of the leading cadres are Party \nmembers, and from ju\xadlevel and above, Party membership is a sine qua non for career \nadvancement. This fact, combined with the nomenklatura system and widespread \nuse of pantouflage, make it possible for the Party to control elite recruitment and \ncirculation in China.\naCknowledgeMenTs\nI am grateful to David Shambaugh for his suggestions and comments and for inviting \nme to participate in the conference “Party Building and Reforming the Communist \nParty of China” held in Beijing in June 2011. I am also most grateful to the conference \nparticipants for comments on a previous draft of this article.')], 'output_text': "A study on Chinese students' views regarding morality, force use and conflict was conducted. The research reveals that these factors are vital elements affecting beliefs about warfare's moral content as well as their implications for decision-making processes concerning national security issues.\n\nThe article discusses cadre management within the Chinese Communist Party (CPC). It emphasizes understanding cadres is crucial to comprehending China’s power system but acknowledges Western scholars face challenges due to limited access, lack of clear definitions and difficulties in translation. Studies often overlook literature on elite studies or focus too much on conflict theory instead of analyzing electoral systems.\n\nThe concept 'cadre' within CPC relates to the composition and working mechanism of top government organs such as State Council, Politburo etc.. However its usage is rarely extended beyond leading cadres who are part of future leaders’ recruitment. This has restricted usefulness in understanding how Chinese political system operates. \n\nCadres assume responsibility for specific tasks while being associated with a party or not; many belong to CPC. The regularisation and formal categorization based on education level, employment status was done during 1950s. Continuous ideological training is aimed at preventing cadres from becoming bureaucratic 'foxes'.\n\nAround 40 million people are considered as cadres in China out of which only eight percent hold leading cadre or ministerial positions like the Central Committee's nomenklatura while others work under public service units, production enterprises and government organs.\n\nThe CPC has a powerful influence over China’s government and society with its nomenklatura system managing high-ranking officials. This ensures that individuals holding trusted positions within party also have support from other bodies in governing China; thus maintaining social basis for power elite.\n\nThe Chinese Communist Party's cadre transfer is required after two terms, usually ten years. Central officials are sometimes rotated between local levels and vice versa as part of the rotation process to ensure control over administrative organs through regulatory bureaucratic nomenklatura lists specifying ranks or leadership positions in various departments while managing a list at central level under Organisational Department’s management.\n\nThe Chinese Communist Party has a system called 'pantouflage' where bureaucrats can move between government and business roles. This includes examples like Zhang Qingwei, Zhou Yongkang who have transitioned from politics to businesses and back again - precondition being membership in CPC only with their party positions allowing transfers regardless of suitability for sector.\n\nAll civil servants are considered cadres regulated by cadre regulations under new Civil Service Law which takes precedence over other relevant laws regarding appointment or supervision. Decision-making lacks accountability & transparency compared to Western countries as leaders like business owners may be evaluated through constituents and media public opinion while Chinese government does not have such systems in place for its officials.\n\nState Bureau of Civil Servants has been established within Ministry of Human Resources indicating that civil servants should be managed under state personnel departments, although implementation is ambiguous due to different regulations depending on their roles. \n\nBo Xilai's scandal highlights potential corruption problems threatening Party legitimacy and governing capacity\n\nCadres play a vital role in China’s civil service system with management crucial for talent development as per recent CPC plan which emphasizes training & developing cadres across party-government-enterprise-science sectors leading to better educated cadre corps than during Mao's time. Quality of public officials is important whether they rule autocratically or not by learning alternative political, economic models and international management practices.\n\nThe CPC has adopted new guidelines regarding appointment selection filling positions examination etc; meritocratic political elites are emerging at different levels which differs from past revolutionary norms. Job rotation above section-level performance evaluation measures have been introduced with feedback on quality work done while flexible remuneration pecuniary rewards may be given to high performers though nomenklatura system still exists making it possible for Party control recruitment within the country.\n\nThe Chinese Communist Party's cadre management is crucial as a vital part of China’s civil service system. The recent plan by CPC emphasizes building high-quality cadres through training and development in various sectors, which has led to better-educated cadre corps than during Maoist era with more job rotations above section-levels performance evaluations measures introduced along flexible remuneration pecuniary rewards for performers.\n\nThe nomenklatura system within China's civil service is still present despite new guidelines issued by CPC such as regular job rotation and multi-candidate elections being implemented at leading government level. The majority rank & file cadre corps doesn't hold party membership but half-century old fact combined with this ensures the Party can control recruitment in circulation while its strength lies especially with leading cadres, political elite that rule China which is more than 95% CPC from ju-level and above indicating strong influence over appointments within various sectors."}
2025-06-23 23:14:43,935 [INFO] folder_organizer.summarizer: Generated summary of length 5618
2025-06-23 23:14:43,936 [DEBUG] folder_organizer.cli: Initial summary: A study on Chinese students' views regarding morality, force use and conflict was conducted. The research reveals that these factors are vital elements affecting beliefs about warfare's moral content as well as their implications for decision-making processes concerning national security issues.

The article discusses cadre management within the Chinese Communist Party (CPC). It emphasizes understanding cadres is crucial to comprehending China’s power system but acknowledges Western scholars face challenges due to limited access, lack of clear definitions and difficulties in translation. Studies often overlook literature on elite studies or focus too much on conflict theory instead of analyzing electoral systems.

The concept 'cadre' within CPC relates to the composition and working mechanism of top government organs such as State Council, Politburo etc.. However its usage is rarely extended beyond leading cadres who are part of future leaders’ recruitment. This has restricted usefulness in understanding how Chinese political system operates. 

Cadres assume responsibility for specific tasks while being associated with a party or not; many belong to CPC. The regularisation and formal categorization based on education level, employment status was done during 1950s. Continuous ideological training is aimed at preventing cadres from becoming bureaucratic 'foxes'.

Around 40 million people are considered as cadres in China out of which only eight percent hold leading cadre or ministerial positions like the Central Committee's nomenklatura while others work under public service units, production enterprises and government organs.

The CPC has a powerful influence over China’s government and society with its nomenklatura system managing high-ranking officials. This ensures that individuals holding trusted positions within party also have support from other bodies in governing China; thus maintaining social basis for power elite.

The Chinese Communist Party's cadre transfer is required after two terms, usually ten years. Central officials are sometimes rotated between local levels and vice versa as part of the rotation process to ensure control over administrative organs through regulatory bureaucratic nomenklatura lists specifying ranks or leadership positions in various departments while managing a list at central level under Organisational Department’s management.

The Chinese Communist Party has a system called 'pantouflage' where bureaucrats can move between government and business roles. This includes examples like Zhang Qingwei, Zhou Yongkang who have transitioned from politics to businesses and back again - precondition being membership in CPC only with their party positions allowing transfers regardless of suitability for sector.

All civil servants are considered cadres regulated by cadre regulations under new Civil Service Law which takes precedence over other relevant laws regarding appointment or supervision. Decision-making lacks accountability & transparency compared to Western countries as leaders like business owners may be evaluated through constituents and media public opinion while Chinese government does not have such systems in place for its officials.

State Bureau of Civil Servants has been established within Ministry of Human Resources indicating that civil servants should be managed under state personnel departments, although implementation is ambiguous due to different regulations depending on their roles. 

Bo Xilai's scandal highlights potential corruption problems threatening Party legitimacy and governing capacity

Cadres play a vital role in China’s civil service system with management crucial for talent development as per recent CPC plan which emphasizes training & developing cadres across party-government-enterprise-science sectors leading to better educated cadre corps than during Mao's time. Quality of public officials is important whether they rule autocratically or not by learning alternative political, economic models and international management practices.

The CPC has adopted new guidelines regarding appointment selection filling positions examination etc; meritocratic political elites are emerging at different levels which differs from past revolutionary norms. Job rotation above section-level performance evaluation measures have been introduced with feedback on quality work done while flexible remuneration pecuniary rewards may be given to high performers though nomenklatura system still exists making it possible for Party control recruitment within the country.

The Chinese Communist Party's cadre management is crucial as a vital part of China’s civil service system. The recent plan by CPC emphasizes building high-quality cadres through training and development in various sectors, which has led to better-educated cadre corps than during Maoist era with more job rotations above section-levels performance evaluations measures introduced along flexible remuneration pecuniary rewards for performers.

The nomenklatura system within China's civil service is still present despite new guidelines issued by CPC such as regular job rotation and multi-candidate elections being implemented at leading government level. The majority rank & file cadre corps doesn't hold party membership but half-century old fact combined with this ensures the Party can control recruitment in circulation while its strength lies especially with leading cadres, political elite that rule China which is more than 95% CPC from ju-level and above indicating strong influence over appointments within various sectors.
2025-06-23 23:14:43,956 [DEBUG] asyncio: Using selector: KqueueSelector
2025-06-23 23:14:43,963 [DEBUG] folder_organizer.cli: User selected action: 
2025-06-23 23:14:43,963 [WARNING] folder_organizer.cli: Invalid option: 
2025-06-23 23:14:43,967 [DEBUG] asyncio: Using selector: KqueueSelector
2025-06-23 23:20:53,559 [INFO] folder_organizer.cli: Loading documents from /Users/lukasfiller/Downloads/dddd
2025-06-23 23:20:53,560 [INFO] folder_organizer.loader: Loading documents from path /Users/lukasfiller/Downloads/dddd
2025-06-23 23:20:53,561 [INFO] folder_organizer.loader: Skipping archive /Users/lukasfiller/Downloads/dddd/Document 9 - 2013_en-cl.docx
2025-06-23 23:20:53,562 [DEBUG] folder_organizer.loader: Loading file /Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt
2025-06-23 23:20:53,562 [DEBUG] folder_organizer.loader: Loaded 1 doc(s) from /Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt
2025-06-23 23:20:53,563 [DEBUG] folder_organizer.loader: Loading file /Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf
2025-06-23 23:20:53,647 [WARNING] pypdf._cmap: Skipping broken line b'01af   01af   1d504': Odd-length string
2025-06-23 23:20:53,648 [WARNING] pypdf._cmap: Skipping broken line b'01dd   01dd   1d505': Odd-length string
2025-06-23 23:20:53,648 [WARNING] pypdf._cmap: Skipping broken line b'0339   0339   1d50a': Odd-length string
2025-06-23 23:20:53,649 [WARNING] pypdf._cmap: Skipping broken line b'0453   0453   1d50e': Odd-length string
2025-06-23 23:20:53,649 [WARNING] pypdf._cmap: Skipping broken line b'04a8   04a8   1d50f': Odd-length string
2025-06-23 23:20:53,649 [WARNING] pypdf._cmap: Skipping broken line b'04cb   04cb   1d510': Odd-length string
2025-06-23 23:20:53,649 [WARNING] pypdf._cmap: Skipping broken line b'04cc   04cc   1d40c': Odd-length string
2025-06-23 23:20:53,650 [WARNING] pypdf._cmap: Skipping broken line b'05c8   05c8   1d513': Odd-length string
2025-06-23 23:20:53,650 [WARNING] pypdf._cmap: Skipping broken line b'05d7   05d7   1d514': Odd-length string
2025-06-23 23:20:53,650 [WARNING] pypdf._cmap: Skipping broken line b'064a   064a   1d516': Odd-length string
2025-06-23 23:20:53,650 [WARNING] pypdf._cmap: Skipping broken line b'0688   0688   1d517': Odd-length string
2025-06-23 23:20:53,650 [WARNING] pypdf._cmap: Skipping broken line b'070c   070c   1d519': Odd-length string
2025-06-23 23:20:53,660 [WARNING] pypdf._cmap: Skipping broken line b'01af   01af   1d504': Odd-length string
2025-06-23 23:20:53,660 [WARNING] pypdf._cmap: Skipping broken line b'01dd   01dd   1d505': Odd-length string
2025-06-23 23:20:53,660 [WARNING] pypdf._cmap: Skipping broken line b'0339   0339   1d50a': Odd-length string
2025-06-23 23:20:53,661 [WARNING] pypdf._cmap: Skipping broken line b'0453   0453   1d50e': Odd-length string
2025-06-23 23:20:53,661 [WARNING] pypdf._cmap: Skipping broken line b'04a8   04a8   1d50f': Odd-length string
2025-06-23 23:20:53,661 [WARNING] pypdf._cmap: Skipping broken line b'04cb   04cb   1d510': Odd-length string
2025-06-23 23:20:53,661 [WARNING] pypdf._cmap: Skipping broken line b'04cc   04cc   1d40c': Odd-length string
2025-06-23 23:20:53,662 [WARNING] pypdf._cmap: Skipping broken line b'05c8   05c8   1d513': Odd-length string
2025-06-23 23:20:53,662 [WARNING] pypdf._cmap: Skipping broken line b'05d7   05d7   1d514': Odd-length string
2025-06-23 23:20:53,662 [WARNING] pypdf._cmap: Skipping broken line b'064a   064a   1d516': Odd-length string
2025-06-23 23:20:53,662 [WARNING] pypdf._cmap: Skipping broken line b'0688   0688   1d517': Odd-length string
2025-06-23 23:20:53,663 [WARNING] pypdf._cmap: Skipping broken line b'070c   070c   1d519': Odd-length string
2025-06-23 23:20:53,802 [DEBUG] folder_organizer.loader: Loaded 16 doc(s) from /Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf
2025-06-23 23:20:53,802 [DEBUG] folder_organizer.loader: Loaded 17 document(s)
2025-06-23 23:20:53,802 [INFO] folder_organizer.cli: Summarizing 17 documents
2025-06-23 23:20:53,802 [INFO] folder_organizer.summarizer: Summarizing 17 document(s)
2025-06-23 23:20:53,811 [DEBUG] folder_organizer.summarizer: Created ChatOllama with model minicpm-v:8b-2.6-q4_K_M
2025-06-23 23:20:53,812 [DEBUG] folder_organizer.summarizer: Loaded summarize chain
2025-06-23 23:20:53,816 [DEBUG] httpcore.connection: connect_tcp.started host='127.0.0.1' port=11434 local_address=None timeout=None socket_options=None
2025-06-23 23:20:53,817 [DEBUG] httpcore.connection: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x109f3fcb0>
2025-06-23 23:20:53,817 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:20:53,817 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:20:53,817 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:20:53,817 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:20:53,817 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:01,637 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:01 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:01,638 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:01,638 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:06,037 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:06,037 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:06,037 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:06,037 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:06,037 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:06,037 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:06,037 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:06,037 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:06,279 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:06 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:06,279 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:06,280 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:07,310 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:07,310 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:07,310 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:07,310 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:07,311 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:07,311 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:07,311 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:07,311 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:08,097 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:08 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:08,098 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:08,098 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:09,017 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:09,018 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:09,018 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:09,018 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:09,018 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:09,019 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:09,019 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:09,019 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:10,491 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:10 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:10,491 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:10,491 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:11,747 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:11,748 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:11,748 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:11,748 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:11,749 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:11,749 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:11,749 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:11,749 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:13,243 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:13 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:13,243 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:13,243 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:15,451 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:15,451 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:15,451 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:15,452 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:15,452 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:15,452 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:15,452 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:15,452 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:16,727 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:16 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:16,727 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:16,727 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:19,093 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:19,093 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:19,093 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:19,093 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:19,094 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:19,094 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:19,094 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:19,094 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:20,728 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:20 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:20,728 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:20,728 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:28,553 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:28,553 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:28,553 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:28,554 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:28,554 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:28,554 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:28,554 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:28,554 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:29,914 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:29 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:29,915 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:29,915 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:35,995 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:35,995 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:35,995 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:35,995 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:35,996 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:35,996 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:35,996 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:35,996 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:36,670 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:36 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:36,671 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:36,671 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:38,638 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:38,638 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:38,638 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:38,639 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:38,639 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:38,639 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:38,639 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:38,639 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:39,864 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:39 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:39,864 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:39,864 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:41,247 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:41,247 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:41,247 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:41,248 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:41,248 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:41,248 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:41,248 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:41,248 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:42,615 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:42 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:42,615 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:42,615 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:44,816 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:44,816 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:44,816 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:44,817 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:44,817 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:44,818 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:44,818 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:44,818 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:46,003 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:46 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:46,003 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:46,003 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:48,090 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:48,090 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:48,090 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:48,092 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:48,092 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:48,092 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:48,092 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:48,092 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:49,251 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:49 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:49,251 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:49,251 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:50,594 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:50,594 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:50,594 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:50,595 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:50,595 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:50,595 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:50,596 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:50,596 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:51,729 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:51 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:51,729 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:51,729 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:54,171 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:54,171 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:54,171 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:54,172 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:54,172 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:54,172 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:54,172 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:54,172 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:55,313 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:55 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:55,313 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:55,313 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:57,416 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:57,416 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:57,416 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:57,417 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:57,417 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:57,417 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:57,417 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:57,418 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:21:58,468 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:21:58 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:21:58,468 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:21:58,468 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:21:59,674 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:21:59,674 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:21:59,674 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:21:59,675 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:21:59,676 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:21:59,676 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:21:59,676 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:21:59,676 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:22:00,467 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:22:00 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:22:00,467 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:22:00,467 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:22:01,546 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:22:01,546 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:22:01,546 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:13,282 [INFO] folder_organizer.cli: Loading documents from /Users/lukasfiller/Downloads/dddd
2025-06-23 23:24:13,283 [INFO] folder_organizer.loader: Loading documents from path /Users/lukasfiller/Downloads/dddd
2025-06-23 23:24:13,285 [INFO] folder_organizer.loader: Skipping archive /Users/lukasfiller/Downloads/dddd/Document 9 - 2013_en-cl.docx
2025-06-23 23:24:13,286 [DEBUG] folder_organizer.loader: Loading file /Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt
2025-06-23 23:24:13,286 [DEBUG] folder_organizer.loader: Loaded 1 doc(s) from /Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt
2025-06-23 23:24:13,287 [DEBUG] folder_organizer.loader: Loading file /Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf
2025-06-23 23:24:13,393 [WARNING] pypdf._cmap: Skipping broken line b'01af   01af   1d504': Odd-length string
2025-06-23 23:24:13,393 [WARNING] pypdf._cmap: Skipping broken line b'01dd   01dd   1d505': Odd-length string
2025-06-23 23:24:13,394 [WARNING] pypdf._cmap: Skipping broken line b'0339   0339   1d50a': Odd-length string
2025-06-23 23:24:13,394 [WARNING] pypdf._cmap: Skipping broken line b'0453   0453   1d50e': Odd-length string
2025-06-23 23:24:13,395 [WARNING] pypdf._cmap: Skipping broken line b'04a8   04a8   1d50f': Odd-length string
2025-06-23 23:24:13,395 [WARNING] pypdf._cmap: Skipping broken line b'04cb   04cb   1d510': Odd-length string
2025-06-23 23:24:13,395 [WARNING] pypdf._cmap: Skipping broken line b'04cc   04cc   1d40c': Odd-length string
2025-06-23 23:24:13,395 [WARNING] pypdf._cmap: Skipping broken line b'05c8   05c8   1d513': Odd-length string
2025-06-23 23:24:13,395 [WARNING] pypdf._cmap: Skipping broken line b'05d7   05d7   1d514': Odd-length string
2025-06-23 23:24:13,396 [WARNING] pypdf._cmap: Skipping broken line b'064a   064a   1d516': Odd-length string
2025-06-23 23:24:13,396 [WARNING] pypdf._cmap: Skipping broken line b'0688   0688   1d517': Odd-length string
2025-06-23 23:24:13,396 [WARNING] pypdf._cmap: Skipping broken line b'070c   070c   1d519': Odd-length string
2025-06-23 23:24:13,406 [WARNING] pypdf._cmap: Skipping broken line b'01af   01af   1d504': Odd-length string
2025-06-23 23:24:13,406 [WARNING] pypdf._cmap: Skipping broken line b'01dd   01dd   1d505': Odd-length string
2025-06-23 23:24:13,407 [WARNING] pypdf._cmap: Skipping broken line b'0339   0339   1d50a': Odd-length string
2025-06-23 23:24:13,407 [WARNING] pypdf._cmap: Skipping broken line b'0453   0453   1d50e': Odd-length string
2025-06-23 23:24:13,407 [WARNING] pypdf._cmap: Skipping broken line b'04a8   04a8   1d50f': Odd-length string
2025-06-23 23:24:13,408 [WARNING] pypdf._cmap: Skipping broken line b'04cb   04cb   1d510': Odd-length string
2025-06-23 23:24:13,408 [WARNING] pypdf._cmap: Skipping broken line b'04cc   04cc   1d40c': Odd-length string
2025-06-23 23:24:13,408 [WARNING] pypdf._cmap: Skipping broken line b'05c8   05c8   1d513': Odd-length string
2025-06-23 23:24:13,408 [WARNING] pypdf._cmap: Skipping broken line b'05d7   05d7   1d514': Odd-length string
2025-06-23 23:24:13,408 [WARNING] pypdf._cmap: Skipping broken line b'064a   064a   1d516': Odd-length string
2025-06-23 23:24:13,409 [WARNING] pypdf._cmap: Skipping broken line b'0688   0688   1d517': Odd-length string
2025-06-23 23:24:13,409 [WARNING] pypdf._cmap: Skipping broken line b'070c   070c   1d519': Odd-length string
2025-06-23 23:24:13,547 [DEBUG] folder_organizer.loader: Loaded 16 doc(s) from /Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf
2025-06-23 23:24:13,548 [DEBUG] folder_organizer.loader: Loaded 17 document(s)
2025-06-23 23:24:13,548 [INFO] folder_organizer.cli: Summarizing 17 documents
2025-06-23 23:24:13,548 [INFO] folder_organizer.summarizer: Summarizing 17 document(s)
2025-06-23 23:24:13,557 [DEBUG] folder_organizer.summarizer: Created ChatOllama with model minicpm-v:8b-2.6-q4_K_M
2025-06-23 23:24:13,557 [DEBUG] folder_organizer.summarizer: Loaded summarize chain
2025-06-23 23:24:13,563 [DEBUG] httpcore.connection: connect_tcp.started host='127.0.0.1' port=11434 local_address=None timeout=None socket_options=None
2025-06-23 23:24:13,563 [DEBUG] httpcore.connection: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x10d60e900>
2025-06-23 23:24:13,563 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:13,563 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:13,563 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:13,563 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:13,563 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:18,785 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:18 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:18,785 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:18,785 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:20,474 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:20,474 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:20,474 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:20,474 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:20,474 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:20,474 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:20,475 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:20,475 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:20,716 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:20 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:20,716 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:20,716 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:21,545 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:21,545 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:21,545 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:21,546 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:21,546 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:21,546 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:21,547 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:21,547 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:22,314 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:22 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:22,314 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:22,314 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:23,513 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:23,513 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:23,513 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:23,513 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:23,513 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:23,513 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:23,513 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:23,513 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:24,926 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:24 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:24,926 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:24,927 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:26,513 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:26,513 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:26,513 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:26,514 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:26,514 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:26,514 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:26,515 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:26,515 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:27,906 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:27 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:27,907 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:27,907 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:28,888 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:28,888 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:28,888 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:28,889 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:28,889 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:28,889 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:28,889 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:28,889 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:30,060 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:30 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:30,061 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:30,061 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:31,716 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:31,716 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:31,717 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:31,717 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:31,717 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:31,717 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:31,717 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:31,717 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:33,236 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:33 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:33,236 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:33,236 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:34,704 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:34,704 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:34,704 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:34,704 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:34,705 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:34,705 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:34,705 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:34,705 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:36,026 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:36 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:36,026 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:36,026 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:38,586 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:38,586 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:38,587 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:38,587 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:38,588 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:38,588 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:38,588 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:38,588 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:39,240 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:39 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:39,241 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:39,241 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:40,563 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:40,563 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:40,563 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:40,564 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:40,564 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:40,564 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:40,565 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:40,565 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:41,745 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:41 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:41,745 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:41,745 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:43,769 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:43,769 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:43,770 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:43,770 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:43,771 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:43,771 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:43,771 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:43,771 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:45,065 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:45 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:45,066 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:45,066 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:47,911 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:47,911 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:47,911 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:47,912 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:47,912 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:47,912 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:47,912 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:47,912 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:49,055 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:49 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:49,056 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:49,056 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:50,533 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:50,533 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:50,533 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:50,534 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:50,534 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:50,534 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:50,534 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:50,534 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:51,669 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:51 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:51,670 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:51,670 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:54,326 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:54,326 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:54,326 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:54,327 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:54,327 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:54,328 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:54,328 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:54,328 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:55,444 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:55 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:55,444 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:55,444 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:24:57,899 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:24:57,899 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:24:57,899 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:24:57,900 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:24:57,900 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:24:57,900 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:24:57,900 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:24:57,901 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:24:59,066 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:24:59 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:24:59,066 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:24:59,066 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:25:01,078 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:25:01,078 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:25:01,078 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:25:01,079 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:25:01,079 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:25:01,079 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:25:01,079 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:25:01,079 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:25:02,116 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:25:02 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:25:02,116 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:25:02,116 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:25:13,746 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:25:13,746 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:25:13,746 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:25:13,746 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:25:13,746 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:25:13,746 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:25:13,746 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:25:13,746 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:25:14,571 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:25:14 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:25:14,571 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:25:14,572 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:25:17,621 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:25:17,621 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:25:17,621 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:26:45,562 [INFO] folder_organizer.cli: Loading documents from /Users/lukasfiller/Downloads/dddd
2025-06-23 23:26:45,564 [INFO] folder_organizer.loader: Loading documents from path /Users/lukasfiller/Downloads/dddd
2025-06-23 23:26:45,565 [INFO] folder_organizer.loader: Skipping archive /Users/lukasfiller/Downloads/dddd/Document 9 - 2013_en-cl.docx
2025-06-23 23:26:45,566 [DEBUG] folder_organizer.loader: Loading file /Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt
2025-06-23 23:26:45,566 [DEBUG] folder_organizer.loader: Loaded 1 doc(s) from /Users/lukasfiller/Downloads/dddd/dis_ch1_3.txt
2025-06-23 23:26:45,567 [DEBUG] folder_organizer.loader: Loading file /Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf
2025-06-23 23:26:45,677 [WARNING] pypdf._cmap: Skipping broken line b'01af   01af   1d504': Odd-length string
2025-06-23 23:26:45,678 [WARNING] pypdf._cmap: Skipping broken line b'01dd   01dd   1d505': Odd-length string
2025-06-23 23:26:45,678 [WARNING] pypdf._cmap: Skipping broken line b'0339   0339   1d50a': Odd-length string
2025-06-23 23:26:45,679 [WARNING] pypdf._cmap: Skipping broken line b'0453   0453   1d50e': Odd-length string
2025-06-23 23:26:45,679 [WARNING] pypdf._cmap: Skipping broken line b'04a8   04a8   1d50f': Odd-length string
2025-06-23 23:26:45,679 [WARNING] pypdf._cmap: Skipping broken line b'04cb   04cb   1d510': Odd-length string
2025-06-23 23:26:45,679 [WARNING] pypdf._cmap: Skipping broken line b'04cc   04cc   1d40c': Odd-length string
2025-06-23 23:26:45,680 [WARNING] pypdf._cmap: Skipping broken line b'05c8   05c8   1d513': Odd-length string
2025-06-23 23:26:45,680 [WARNING] pypdf._cmap: Skipping broken line b'05d7   05d7   1d514': Odd-length string
2025-06-23 23:26:45,680 [WARNING] pypdf._cmap: Skipping broken line b'064a   064a   1d516': Odd-length string
2025-06-23 23:26:45,680 [WARNING] pypdf._cmap: Skipping broken line b'0688   0688   1d517': Odd-length string
2025-06-23 23:26:45,681 [WARNING] pypdf._cmap: Skipping broken line b'070c   070c   1d519': Odd-length string
2025-06-23 23:26:45,690 [WARNING] pypdf._cmap: Skipping broken line b'01af   01af   1d504': Odd-length string
2025-06-23 23:26:45,690 [WARNING] pypdf._cmap: Skipping broken line b'01dd   01dd   1d505': Odd-length string
2025-06-23 23:26:45,691 [WARNING] pypdf._cmap: Skipping broken line b'0339   0339   1d50a': Odd-length string
2025-06-23 23:26:45,692 [WARNING] pypdf._cmap: Skipping broken line b'0453   0453   1d50e': Odd-length string
2025-06-23 23:26:45,692 [WARNING] pypdf._cmap: Skipping broken line b'04a8   04a8   1d50f': Odd-length string
2025-06-23 23:26:45,692 [WARNING] pypdf._cmap: Skipping broken line b'04cb   04cb   1d510': Odd-length string
2025-06-23 23:26:45,692 [WARNING] pypdf._cmap: Skipping broken line b'04cc   04cc   1d40c': Odd-length string
2025-06-23 23:26:45,693 [WARNING] pypdf._cmap: Skipping broken line b'05c8   05c8   1d513': Odd-length string
2025-06-23 23:26:45,693 [WARNING] pypdf._cmap: Skipping broken line b'05d7   05d7   1d514': Odd-length string
2025-06-23 23:26:45,693 [WARNING] pypdf._cmap: Skipping broken line b'064a   064a   1d516': Odd-length string
2025-06-23 23:26:45,693 [WARNING] pypdf._cmap: Skipping broken line b'0688   0688   1d517': Odd-length string
2025-06-23 23:26:45,693 [WARNING] pypdf._cmap: Skipping broken line b'070c   070c   1d519': Odd-length string
2025-06-23 23:26:45,835 [DEBUG] folder_organizer.loader: Loaded 16 doc(s) from /Users/lukasfiller/Downloads/dddd/Brodsgaard - Cadre Pers Management CPC 2012.pdf
2025-06-23 23:26:45,835 [DEBUG] folder_organizer.loader: Loaded 17 document(s)
2025-06-23 23:26:45,835 [INFO] folder_organizer.cli: Summarizing 17 documents
2025-06-23 23:26:45,835 [INFO] folder_organizer.summarizer: Summarizing 17 document(s)
2025-06-23 23:26:45,844 [DEBUG] folder_organizer.summarizer: Created ChatOllama with model minicpm-v:8b-2.6-q4_K_M
2025-06-23 23:26:45,844 [DEBUG] folder_organizer.summarizer: Loaded summarize chain
2025-06-23 23:26:45,849 [DEBUG] httpcore.connection: connect_tcp.started host='127.0.0.1' port=11434 local_address=None timeout=None socket_options=None
2025-06-23 23:26:45,849 [DEBUG] httpcore.connection: connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x110fe2ba0>
2025-06-23 23:26:45,849 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:26:45,849 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:26:45,849 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:26:45,849 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:26:45,849 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:26:53,020 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:26:53 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:26:53,020 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:26:53,021 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:26:55,049 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:26:55,049 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:26:55,050 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:26:55,051 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:26:55,051 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:26:55,051 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:26:55,052 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:26:55,052 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:26:55,350 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:26:55 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:26:55,351 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:26:55,351 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:26:56,633 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:26:56,634 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:26:56,634 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:26:56,634 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:26:56,635 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:26:56,635 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:26:56,635 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:26:56,635 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:26:57,738 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:26:57 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:26:57,738 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:26:57,738 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:26:59,286 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:26:59,286 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:26:59,286 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:26:59,287 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:26:59,287 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:26:59,288 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:26:59,288 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:26:59,288 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:00,935 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:00 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:00,935 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:00,936 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:01,903 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:01,905 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:01,905 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:01,906 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:01,910 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:01,910 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:01,914 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:01,922 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:03,358 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:03 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:03,358 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:03,358 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:04,587 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:04,588 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:04,588 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:04,589 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:04,589 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:04,589 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:04,589 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:04,589 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:05,685 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:05 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:05,685 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:05,685 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:07,521 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:07,521 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:07,521 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:07,522 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:07,522 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:07,522 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:07,522 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:07,522 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:09,068 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:09 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:09,069 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:09,069 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:12,423 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:12,423 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:12,423 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:12,424 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:12,424 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:12,424 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:12,424 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:12,424 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:13,696 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:13 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:13,697 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:13,697 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:15,497 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:15,498 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:15,498 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:15,498 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:15,499 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:15,499 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:15,499 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:15,499 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:16,126 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:16 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:16,126 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:16,126 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:17,342 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:17,342 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:17,342 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:17,343 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:17,343 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:17,343 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:17,343 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:17,344 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:18,480 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:18 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:18,481 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:18,481 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:21,208 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:21,208 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:21,208 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:21,209 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:21,209 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:21,209 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:21,210 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:21,210 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:22,483 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:22 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:22,483 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:22,483 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:25,623 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:25,624 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:25,624 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:25,624 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:25,625 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:25,625 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:25,625 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:25,625 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:26,804 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:26 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:26,804 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:26,804 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:29,306 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:29,306 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:29,306 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:29,307 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:29,307 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:29,307 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:29,308 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:29,308 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:30,488 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:30 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:30,488 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:30,488 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:32,414 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:32,414 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:32,414 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:32,415 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:32,415 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:32,415 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:32,415 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:32,415 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:33,574 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:33 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:33,574 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:33,574 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:36,522 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:36,522 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:36,522 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:36,523 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:36,523 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:36,523 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:36,524 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:36,524 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:37,778 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:37 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:37,778 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:37,778 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:39,115 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:39,115 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:39,115 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:39,116 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:39,116 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:39,116 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:39,116 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:39,116 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:40,236 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:40 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:40,237 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:40,237 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:41,331 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:41,331 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:41,331 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:41,332 [DEBUG] httpcore.http11: send_request_headers.started request=<Request [b'POST']>
2025-06-23 23:27:41,332 [DEBUG] httpcore.http11: send_request_headers.complete
2025-06-23 23:27:41,332 [DEBUG] httpcore.http11: send_request_body.started request=<Request [b'POST']>
2025-06-23 23:27:41,332 [DEBUG] httpcore.http11: send_request_body.complete
2025-06-23 23:27:41,332 [DEBUG] httpcore.http11: receive_response_headers.started request=<Request [b'POST']>
2025-06-23 23:27:42,168 [DEBUG] httpcore.http11: receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/x-ndjson'), (b'Date', b'Tue, 24 Jun 2025 03:27:42 GMT'), (b'Transfer-Encoding', b'chunked')])
2025-06-23 23:27:42,169 [INFO] httpx: HTTP Request: POST http://127.0.0.1:11434/api/chat "HTTP/1.1 200 OK"
2025-06-23 23:27:42,169 [DEBUG] httpcore.http11: receive_response_body.started request=<Request [b'POST']>
2025-06-23 23:27:44,093 [DEBUG] httpcore.http11: receive_response_body.complete
2025-06-23 23:27:44,093 [DEBUG] httpcore.http11: response_closed.started
2025-06-23 23:27:44,093 [DEBUG] httpcore.http11: response_closed.complete
2025-06-23 23:27:44,094 [ERROR] folder_organizer.cli: Application error: Could not import transformers python package. This is needed in order to calculate get_token_ids. Please install it with `pip install transformers`.
